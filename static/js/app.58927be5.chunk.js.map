{"version":3,"sources":["assets/onboarding/slide1.png","assets/onboarding/slide2.png","assets/onboarding/slide3.png","assets/onboarding/slide4.png","assets/onboarding/slide5.png","assets/onboarding/slide6.png","assets/home/treeBackground.jpg","assets/mics/void.png","src/lang/translation/screens/login.ts","src/lang/translation/screens/register.ts","src/lang/translation/screens/forgotPassword.ts","src/lang/translation/screens/onboarding.ts","src/lang/translation/screens/home.ts","src/lang/translation/screens/partialStory.ts","src/lang/translation/screens/participationSuccess.ts","src/lang/translation/screens/library.ts","src/lang/translation/screens/storyViewer.ts","src/lang/translation/screens/index.ts","src/lang/translation/common/snackbar.ts","src/lang/translation/common/app.ts","src/lang/translation/common/sentencesList.ts","src/lang/translation/common/codeValidationModal.ts","src/lang/translation/common/participationFab.ts","src/lang/translation/common/index.ts","src/lang/translation/errors/index.ts","src/lang/translation/index.ts","src/lang/index.ts","src/core/constants/vars.ts","src/core/constants/images.ts","src/core/storage.ts","src/core/apolloClient.ts","src/core/constants/app.ts","src/store/common/snackbar/index.ts","src/components/common/app/Snackbar.tsx","src/components/common/app/BottomSheet.tsx","src/core/device.ts","src/components/AppContainer.tsx","src/core/utils/promise/handleWithSnack.ts","src/core/utils/promise/Fetchable.ts","src/core/utils/promise/ObservablePromiseStatus.ts","src/core/utils/OpenState.tsx","src/core/utils/LoadingStatus.ts","src/store/screens/home/api/GetDailyStory.ts","src/store/screens/home/api/GetStatistics.ts","src/store/screens/home/index.ts","src/store/screens/partial-story/api/GetPartialStory.ts","src/store/screens/partial-story/index.ts","src/store/screens/library/api/MyStories.ts","src/store/screens/library/api/MySentencesCount.ts","src/store/screens/library/index.ts","src/store/handlers.ts","src/store/common/account/api/login.ts","src/store/common/account/api/register.ts","src/store/common/account/api/GetAccount.ts","src/store/common/account/api/UsernameAvailability.ts","src/store/common/account/api/VerifyEmail.ts","src/store/common/account/api/ResendEmailVerificationCode.ts","src/store/common/account/api/DeleteAccount.ts","src/store/common/account/api/ForgotPassword.ts","src/store/common/account/api/ResetPassword.ts","src/store/common/account/index.ts","src/store/screens/onboarding/index.ts","src/store/common/app/index.ts","src/components/screens/Loading.tsx","src/store/common/sentence/api/ReportSentence.ts","src/store/common/sentence/api/MarkSentenceCompleted.ts","src/store/common/sentence/api/CreateSentence.ts","src/store/common/sentence/index.ts","src/components/common/SentencesList/Sentence.tsx","src/components/common/SentencesList/index.tsx","src/components/common/CodeValidationModal.tsx","src/components/common/ParticipationFab.tsx","src/components/screens/Home/Hero.tsx","src/components/screens/Home/Statistics.tsx","src/components/screens/Home/DailyStory.tsx","src/components/screens/Home/MyLibrary.tsx","src/components/screens/Home/SettingsSheet.tsx","src/core/constants/links.ts","src/components/screens/Home/index.tsx","src/components/screens/Login.tsx","src/components/screens/Register.tsx","src/components/screens/ForgotPassword/ForgotPasswordForm.tsx","src/components/screens/ForgotPassword/ResetPasswordForm.tsx","src/components/screens/ForgotPassword/index.tsx","src/components/screens/Onboarding/OnboardingCarousel/OnboardingItem.tsx","src/components/screens/Onboarding/OnboardingCarousel/Paginator.tsx","src/components/screens/Onboarding/OnboardingCarousel/index.tsx","src/components/screens/Onboarding/index.tsx","src/core/hooks/useKeyboardVisible.ts","src/components/screens/PartialStory/CharsProgress.tsx","src/components/screens/PartialStory/NewSentenceForm.tsx","src/components/screens/PartialStory/index.tsx","src/components/screens/ParticipationSuccess.tsx","src/store/screens/story-viewer/api/GetStory.ts","src/store/screens/story-viewer/index.ts","src/components/screens/StoryViewer.tsx","src/components/screens/Library/StoryPreview.tsx","src/components/screens/Library/EmptyLibrary.tsx","src/components/screens/Library/index.tsx","src/components/Navigator.tsx","src/components/App.tsx"],"names":["module","exports","fr","form","headlineTitle","headlineDescription","email","password","submit","forgotPassword","register","en","username","usernameHelper","registerSuccess","forgotPasswordForm","title","subtitle","emailLabel","resetPasswordForm","newPasswordLabel","validationCodeLabel","slide1","description","slide2","slide3","slide4","slide5","slide6","hero","hello","guest","statistics","stats","users","trees","stories","sentences","nullValue","dailyStory","error","myLibrary","settingsSheet","actions","about","support","logout","logoutSuccess","dangerZone","deleteAccount","accountDeletionAlert","cancel","accountDeletionSuccess","listInfoHeader","write","partialStoryLink","homeLink","pageInfo","emptyLibrary","misc","dateFormat","completedTitle","login","onboarding","home","partialStory","participationSuccess","library","storyViewer","close","backTitle","screens","report","reportSuccessfull","markCompleted","markCompletedSuccessfull","deletedUser","subTitle","resendCode","participate","snackbar","app","sentencesList","codeValidationModal","participationFab","_Default","InvalidLoginOrPassword","InvalidEmailFormat","EmailTaken","InvalidValidationCode","InvalidUsernameLength","InvalidUsernameChar","UsernameTaken","InvalidSentenceLength","ResourceNotFound","SpamDetected","InsufficientPermission","InvalidArgument","SentenceAlreadyPartOfStory","SentenceAlreadyReported","SentenceAlreadyMarkedComplete","common","errors","resources","translation","i18n","use","initReactI18next","init","lng","getLocales","languageCode","fallbackLng","interpolation","escapeValue","compatibilityJSON","UsernameValidationRegex","RegExp","require","treeBackground","empty","key","value","opts","secure","SecureStore","AsyncStorage","setItem","getItem","removeItem","deleteItem","httpLink","createHttpLink","uri","authLink","setContext","_","headers","undefined","token","Storage","authorization","ApolloClient","name","version","link","concat","cache","InMemoryCache","typePolicies","PublicQuery","merge","existing","incoming","mergeObjects","AuthenticatedQuery","PublicMutation","AuthenticatedMutation","DurationToMs","Map","visible","msg","duration","makeObservable","this","observable","display","action","dismiss","get","observer","t","useTranslation","keyPrefix","store","onDismiss","label","onPress","BottomSheet","props","open","onClose","animationDuration","scrollViewProps","children","sheetHeight","useWindowDimensions","height","verticalOffset","React","useRef","Animated","Value","current","openAnimation","timing","toValue","useNativeDriver","closeAnimation","useEffect","start","View","style","styles","container","transform","translateY","header","Text","variant","IconButton","icon","size","closeBtn","ScrollView","StyleSheet","create","position","bottom","left","width","backgroundColor","borderRadius","overflow","paddingVertical","textAlign","color","top","right","isMobile","Platform","OS","flex","appWrapper","aspectRatio","margin","WebContainer","handleWithSnack","promise","onSuccess","successMessage","onError","errorMessage","then","snackbarStore","catch","isApolloError","errorCode","graphQLErrors","extensions","code","ns","Fetchable","fetch","status","result","ensureSuccessReload","track","lastResult","lastError","currentPromise","setResult","setError","reset","computed","tracking","loading","finished","thenUnhandled","thenDropped","catchUnhandled","catchDropped","finallyUnhandled","finallyDropped","finally","OpenState","isOpen","bound","toggle","LoadingStatus","setLoading","setLoaded","query","gql","GetDailyStory","apolloClient","data","public","GetStatistics","fetchPolicy","console","settingsOpenState","Promise","all","ensureSuccess","GetPartialStory","authenticated","lastSentence","length","MyStories","myStories","MySentencesCount","mySentences","mySentencesCount","homeHandler","homeStore","refresh","partialStoryHandler","partialStoryStore","libraryHandler","libraryStore","mutation","Register","variables","mutate","account","UsernameAvailability","usernameAvailability","VerifyEmail","ResendEmailVerificationCode","ForgotPassword","ResetPassword","user","RegisterMutation","verifyEmail","resendEmailVerificationCode","resetPassword","setUser","loggedIn","loggedOut","loginMutation","assert","GetAccount","OnboardingStore","onboardingCompleted","setOnboardingCompleted","state","OnboardingStorageKey","onboardingState","warn","allSettled","onboardingStore","accountStore","refreshAccount","alignItems","justifyContent","Loading","ActivityIndicator","ReportSentence","MarkSentenceCompleted","CreateSentence","text","fontSize","lineHeight","userTitle","fontWeight","Sentence","sentence","disableControls","onReport","onMarkedCompleted","useState","menuVisibility","setMenuVisibility","Menu","anchor","owner","id","anchorPosition","Item","titleStyle","format","createdAt","Divider","leadingIcon","disabled","parentSentenceId","sentenceStore","sentenceId","SentencesList","passedProps","FlatList","renderItem","item","keyExtractor","toString","ListEmptyComponent","ItemSeparatorComponent","bold","padding","borderWidth","borderColor","marginVertical","marginBottom","codeInput","resendCodeBtn","marginTop","CodeValidationModal","codeLength","onCodeChange","onCodeCompleted","onResendCode","resendBtnDisabled","setResendBtnDisabled","placeholderStr","useMemo","padStart","Modal","dismissable","contentContainerStyle","TextInput","mode","placeholder","textContentType","keyboardType","maxLength","onChangeText","Keyboard","Button","setTimeout","fab","ParticipationFab","navigation","useNavigation","FAB","navigate","Hero","ImageBackground","source","Images","resizeMode","textOverlay","settingsIcon","minHeight","borderBottomLeftRadius","borderBottomRightRadius","paddingTop","paddingLeft","Statistics","formatValue","Card","Title","titleVariant","Icon","Content","itemStyle","openTrees","DailyStory","storyId","MyLibrary","SettingsSheet","Section","Subheader","Linking","canOpenURL","canOpen","openURL","Alert","alert","Home","refreshControl","RefreshControl","refreshing","onRefresh","pullRefresh","cardsContainer","paddingHorizontal","LoginValidationSchema","Yup","shape","required","formContainer","marginHorizontal","headline","textField","button","Login","headerHeight","useHeaderHeight","SafeAreaView","KeyboardAvoidingView","behavior","keyboardVerticalOffset","initialValues","validationSchema","onSubmit","values","index","routes","handleChange","handleSubmit","touched","isSubmitting","Boolean","secureTextEntry","RegisterValidationSchema","min","max","matches","codeValidationModalOpen","setCodeValidationModalOpen","registerVariablesRef","handleBlur","onBlur","HelperText","type","emailValidationCode","ForgotPasswordForm","onEmailSubmited","newPassword","validationCode","ResetPasswordForm","autoCapitalize","setEmail","image","texts","OnboardingItem","Image","iconColor","saveOnboardingCompleted","replace","flexDirection","dot","Paginator","itemsCount","currentItemIdx","Array","from","idx","opacity","OnboardingCarousel","slides","getSlides","setCurrentItemIdx","handleViewableItemsChanged","useCallback","info","viewableItems","horizontal","pagingEnabled","bounces","showsHorizontalScrollIndicator","onViewableItemsChanged","viewabilityConfig","viewAreaCoveragePercentThreshold","Onboarding","ShowEventName","HideEventName","progressBar","CharsProgress","maxCharsCount","currentCharsCount","progress","ProgressBar","NewSentenceSchema","textInput","maxHeight","controlsContainer","NewSentenceForm","isKeyboardVisible","setKeyboardVisible","showListener","addListener","hideListener","remove","useKeyboardVisible","resetForm","multiline","PartialStory","sentenceList","ListHeaderComponent","buttonsContainer","buttonText","ParticipationSuccess","GetStory","story","StoryViewer","route","params","useFocusEffect","dateHeader","card","StoryPreview","subtitleVariant","EmptyLibrary","Library","infoText","sentencesCount","Stack","createNativeStackNavigator","Navigator","AppStore","NavigationContainer","initialRouteName","screenOptions","headerStyle","headerBackTitle","headerTitleStyle","contentStyle","Screen","component","options","headerShown","listeners","focus","registerRootComponent","ApolloProvider","client","theme","MD3DarkTheme","AppContainer","StatusBar"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,4C,oBCA3CD,EAAOC,QAAU,IAA0B,kC,qICoC5B,GACbC,GAzBgC,CAChCC,KAAM,CACJC,cAAe,aACfC,oBAAqB,mCACrBC,MAAO,QACPC,SAAU,eACVC,OAAQ,eACRC,eAAgB,yBAChBC,SAAU,0BAkBZC,GAdgC,CAChCR,KAAM,CACJC,cAAe,gBACfC,oBAAqB,0BACrBC,MAAO,QACPC,SAAU,WACVC,OAAQ,UACRC,eAAgB,kBAChBC,SAAU,6BCOC,GACbR,GA3BmC,CACnCC,KAAM,CACJC,cAAe,sBACfC,oBAAqB,wBACrBO,SAAU,oBACVC,eAAgB,qCAChBP,MAAO,QACPC,SAAU,eACVC,OAAQ,sBACRM,gBAAiB,qCAmBnBH,GAfmC,CACnCR,KAAM,CACJC,cAAe,oBACfC,oBAAqB,oBACrBO,SAAU,WACVC,eAAgB,qCAChBP,MAAO,QACPC,SAAU,WACVC,OAAQ,UACRM,gBAAiB,kCCaN,GACbZ,GAjCmC,CACnCa,mBAAoB,CAClBC,MAAO,sCACPC,SAAU,uDACVC,WAAY,QACZV,OAAQ,mBAEVW,kBAAmB,CACjBH,MAAO,sCACPC,SAAU,+CACVG,iBAAkB,uBAClBC,oBAAqB,OACrBb,OAAQ,gBAsBVG,GAlBmC,CACnCI,mBAAoB,CAClBC,MAAO,sBACPC,SAAU,6CACVC,WAAY,QACZV,OAAQ,0BAEVW,kBAAmB,CACjBH,MAAO,sBACPC,SAAU,yBACVG,iBAAkB,eAClBC,oBAAqB,OACrBb,OAAQ,UCsBG,GACbN,GArDqC,CACrCoB,OAAQ,CACNN,MAAO,sBACPO,YAAa,uLAEfC,OAAQ,CACNR,MAAO,UACPO,YAAY,4NAEdE,OAAQ,CACNT,MAAO,qBACPO,YAAa,2NAEfG,OAAQ,CACNV,MAAO,iBACPO,YAAa,wMAEfI,OAAQ,CACNX,MAAO,SACPO,YAAa,+MAEfK,OAAQ,CACNZ,MAAO,sBAgCTL,GA5BqC,CACrCW,OAAQ,CACNN,MAAO,mBACPO,YAAa,mKAEfC,OAAQ,CACNR,MAAO,WACPO,YAAY,0LAEdE,OAAQ,CACNT,MAAO,gBACPO,YAAa,8KAEfG,OAAQ,CACNV,MAAO,kBACPO,YAAa,6JAEfI,OAAQ,CACNX,MAAO,QACPO,YAAa,6MAEfK,OAAQ,CACNZ,MAAO,uBCmEI,GACbd,GAvF+B,CAC/B2B,KAAM,CACJC,MAAO,WACPC,MAAO,aAETC,WAAY,CACVhB,MAAO,oBACPiB,MAAO,CACLC,MAAO,eACPC,MAAO,iCACPC,QAAS,gCACTC,UAAW,oCAEbC,UAAW,OAEbC,WAAY,CACVvB,MAAO,qBACPC,SAAU,mDACVuB,MAAO,2BAETC,UAAW,CACTzB,MAAO,kBACPC,SAAU,iCAEZyB,cAAe,CACb1B,MAAO,gBACP2B,QAAS,UACTC,MAAO,cACPC,QAAS,UACTC,OAAQ,oBACRC,cAAe,kCACfC,WAAY,iBACZC,cAAe,uBACfC,qBAAsB,CACpBlC,MAAO,wBACPO,YAAa,0FACb4B,OAAQ,SACR3C,OAAQ,aAEV4C,uBAAwB,sCAiD1BzC,GA7C+B,CAC/BkB,KAAM,CACJC,MAAO,SACPC,MAAO,SAETC,WAAY,CACVhB,MAAO,aACPiB,MAAO,CACLC,MAAO,QACPC,MAAO,8BACPC,QAAS,qBACTC,UAAW,8BAEbC,UAAW,OAEbC,WAAY,CACVvB,MAAO,gBACPC,SAAU,oCACVuB,MAAO,wBAETC,UAAW,CACTzB,MAAO,UACPC,SAAU,yBAEZyB,cAAe,CACb1B,MAAO,WACP2B,QAAS,UACTC,MAAO,QACPC,QAAS,UACTC,OAAQ,SACRC,cAAe,0BACfC,WAAY,cACZC,cAAe,oBACfC,qBAAsB,CACpBlC,MAAO,mBACPO,YAAa,mFACb4B,OAAQ,SACR3C,OAAQ,UAEV4C,uBAAwB,kCC9Gb,GACblD,GAXuC,CACvCmD,eAAgB,gEAChBC,MAAO,aAUP3C,GAPuC,CACvC0C,eAAgB,0CAChBC,MAAO,UCMM,GACbpD,GAb+C,CAC/Cc,MAAO,+BACPuC,iBAAkB,gBAClBC,SAAU,WAWV7C,GAR+C,CAC/CK,MAAO,qBACPuC,iBAAkB,oBAClBC,SAAU,SCSG,GACbtD,GAjB4B,CAC5BuD,SAAU,sIACVC,aAAc,sBACdC,KAAM,CACJC,WAAY,qBAcdjD,GAV4B,CAC5B8C,SAAU,wGACVC,aAAc,kBACdC,KAAM,CACJC,WAAY,0BCLD,GACb1D,GAXgC,CAChC2D,eAAgB,qBAChBD,WAAY,yBAUZjD,GAPgC,CAChCkD,eAAgB,gBAChBD,WAAY,4BCkCC,GACb1D,GAzB4B,CAC5B4D,MAAOA,EAAM5D,GACbQ,SAAUA,EAASR,GACnB6D,WAAYA,EAAW7D,GACvB8D,KAAMA,EAAK9D,GACX+D,aAAcA,EAAa/D,GAC3BgE,qBAAsBA,EAAqBhE,GAC3CiE,QAASA,EAAQjE,GACjBkE,YAAaA,EAAYlE,GACzBO,eAAgBA,EAAeP,IAiB/BS,GAd4B,CAC5BmD,MAAOA,EAAMnD,GACbD,SAAUA,EAASC,GACnBoD,WAAYA,EAAWpD,GACvBqD,KAAMA,EAAKrD,GACXsD,aAAcA,EAAatD,GAC3BuD,qBAAsBA,EAAqBvD,GAC3CwD,QAASA,EAAQxD,GACjByD,YAAaA,EAAYzD,GACzBF,eAAgBA,EAAeE,KC/BlB,GACbT,GAT6B,CAC7BmE,MAAO,UASP1D,GAN6B,CAC7B0D,MAAO,UC2BM,GACbnE,GAzBwB,CACxBoE,UAAW,SACXC,QAAS,CACPT,MAAO,eACPpD,SAAU,qBACVD,eAAgB,yBAChBwD,aAAc,aACdG,YAAa,UACbD,QAAS,oBAkBXxD,GAdwB,CACxB2D,UAAW,OACXC,QAAS,CACPT,MAAO,QACPpD,SAAU,WACVD,eAAgB,kBAChBwD,aAAc,cACdG,YAAa,SACbD,QAAS,aCCE,GACbjE,GAvBkC,CAClCsE,OAAQ,WACRC,kBAAmB,4BACnBC,cAAe,sBACfC,yBAA0B,sBAC1BC,YAAa,UACbjB,KAAM,CACJC,WAAY,mBAiBdjD,GAbkC,CAClC6D,OAAQ,SACRC,kBAAmB,wBACnBC,cAAe,iBACfC,yBAA0B,kBAC1BC,YAAa,UACbjB,KAAM,CACJC,WAAY,wBCXD,GACb1D,GAbwC,CACxCc,MAAO,mCACP6D,SAAU,kEACVC,WAAY,oBAWZnE,GARwC,CACxCK,MAAO,mBACP6D,SAAU,+CACVC,WAAY,gBCHC,GACb5E,GATqC,CACrC6E,YAAa,cASbpE,GANqC,CACrCoE,YAAa,gBCqBA,GACb7E,GAjB2B,CAC3B8E,SAAUA,EAAS9E,GACnB+E,IAAKA,EAAI/E,GACTgF,cAAeA,EAAchF,GAC7BiF,oBAAqBA,EAAoBjF,GACzCkF,iBAAkBA,EAAiBlF,IAanCS,GAV2B,CAC3BqE,SAAUA,EAASrE,GACnBsE,IAAKA,EAAItE,GACTuE,cAAeA,EAAcvE,GAC7BwE,oBAAqBA,EAAoBxE,GACzCyE,iBAAkBA,EAAiBzE,KCoCtB,GACbT,GA3C2B,CAC3BmF,SAAU,0BAEVC,uBAAwB,6CACxBC,mBAAoB,0BACpBC,WAAY,uCACZC,sBAAuB,mCACvBC,sBAAuB,oCACvBC,oBAAqB,yDACrBC,cAAe,0CACfC,sBAAuB,gCACvBC,iBAAkB,0BAClBC,aAAc,qBACdC,uBAAwB,2BACxBC,gBAAiB,oBACjBC,2BAA4B,qDAC5BC,wBAAyB,mCACzBC,8BAA+B,4DA2B/BzF,GAvB2B,CAC3B0E,SAAU,uBAEVC,uBAAwB,4BACxBC,mBAAoB,uBACpBC,WAAY,sBACZC,sBAAuB,4BACvBC,sBAAuB,0BACvBC,oBAAqB,yCACrBC,cAAe,yBACfC,sBAAuB,0BACvBC,iBAAkB,qBAClBC,aAAc,gBACdC,uBAAwB,0BACxBC,gBAAiB,mBACjBC,2BAA4B,mCAC5BC,wBAAyB,4BACzBC,8BAA+B,gDCrClB,GACblG,GAbgC,CAChCmG,OAAQA,EAAOnG,GACfqE,QAASA,EAAQrE,GACjBoG,OAAQA,EAAOpG,IAWfS,GARgC,CAChC0F,OAAQA,EAAO1F,GACf4D,QAASA,EAAQ5D,GACjB2F,OAAQA,EAAO3F,KCdX4F,EAAmD,CACvD5F,GAAI6F,EAAY7F,GAChBT,GAAIsG,EAAYtG,IAGlBuG,UACGC,IAAIC,oBACJC,KAAK,CACJL,YACAM,IAAoB,OAAjB,EAAEC,uBAAa,SAAE,EAAf,EAAiBC,aACtBC,YAAa,KACbC,cAAe,CACbC,aAAa,GAEfC,kBAAmB,OAGRV,QAAI,Q,qDCnBNW,EAA0B,IAAIC,OAAO,eCHnC,GACbtD,WAAY,CACVzC,OAAQgG,EAAQ,KAChB9F,OAAQ8F,EAAQ,KAChB7F,OAAQ6F,EAAQ,KAChB5F,OAAQ4F,EAAQ,KAChB3F,OAAQ2F,EAAQ,KAChB1F,OAAQ0F,EAAQ,MAGlBtD,KAAM,CACJuD,eAAgBD,EAAQ,MAG1B3D,KAAM,CACJ6D,MAAOF,EAAQ,O,kBCRG,aAMrB,OANqB,OAAtB,UAAuBG,EAAaC,GAA2C,IAA5BC,EAAoB,uDAAG,GAChEC,EAAWD,EAAXC,OACR,OAAIA,UAAiBC,sBACZA,eAAyBJ,EAAKC,GAEhCI,UAAaC,QAAQN,EAAKC,OAClC,sBAEqB,aAKrB,OALqB,OAAtB,UAAuBD,GAAyC,IAA5BE,EAAoB,uDAAG,GACjDC,EAAWD,EAAXC,OACR,OAAIA,UAAiBC,sBACZA,eAAyBJ,GAC3BK,UAAaE,QAAQP,OAC7B,sBAEwB,aAKxB,OALwB,OAAzB,UAA0BA,GAAyC,IAA5BE,EAAoB,uDAAG,GACpDC,EAAWD,EAAXC,OACR,OAAIA,UAAiBC,sBACZA,kBAA4BJ,GAC9BK,UAAaG,WAAWR,OAChC,sBAEc,OACbM,QA7B+C,SAM1B,EAAD,mCAwBpBC,QAlBD,SAEsB,GAAD,gCAiBpBE,WAZD,SAEyB,GAAD,iCChBnBC,EAAWC,yBAAe,CAC9BC,IAAK,qCAGDC,EAAWC,qBAAW,WAAD,WAAC,UAAOC,EAAE,GAAkB,IAAD,EAAdC,EAAO,EAAPA,aACtBC,IAAZD,IACFA,EAAU,IACZ,IAAME,QAAcC,EAAQZ,QCVF,aDUwB,CAAEJ,QAAQ,IACtDb,EAA8B,OAAlB,EAAGD,uBAAa,SAAE,EAAf,EAAiBC,aAKtC,OAJc,OAAV4B,IACFF,EAAQI,cAAa,UAAaF,GAChC5B,IACF0B,EAAQ,oBAAsB1B,GACzB,CAAE0B,cACR,OAAF,8CAV2B,IAYb,MAAIK,eAAa,CAC9BC,KCvBqB,YDwBrBC,QCvBwB,MDwBxBC,KAAMX,EAASY,OAAOf,GACtBgB,MAAO,IAAIC,gBAAc,CACvBC,aAAc,CACZC,YAAa,CACXC,MAAK,SAACC,EAAUC,EAAS,GACvB,OAAOC,EAD+B,EAAZA,cACNF,EAAUC,KAGlCE,mBAAoB,CAClBJ,MAAK,SAACC,EAAUC,EAAS,GACvB,OAAOC,EAD+B,EAAZA,cACNF,EAAUC,KAGlCG,eAAgB,CACdL,MAAK,SAACC,EAAUC,EAAS,GACvB,OAAOC,EAD+B,EAAZA,cACNF,EAAUC,KAGlCI,sBAAuB,CACrBN,MAAK,SAACC,EAAUC,EAAS,GACvB,OAAOC,EAD+B,EAAZA,cACNF,EAAUC,U,gEEnClCK,GAAe,IAAIC,IAAsB,CAC7C,CAAC,QAAS,KACV,CAAC,OAAQ,KACT,CAAC,OAAQ,OAiCI,OA9BI,WAKjB,aAAe,kBAJfC,SAAmB,EAAM,KACzBC,IAAc,GAAG,KACjBC,SAXwB,IActBC,0BAAeC,KAAM,CACnBJ,QAASK,cACTJ,IAAKI,cACLH,SAAUG,cACVC,QAASC,UACTC,QAASD,YAgBZ,OAdA,6BAED,SAAQN,GAAsC,IAAD,EAAxBtC,EAAiB,uDAAG,GACvCyC,KAAKH,IAAMA,EACX,IAAQC,EAAavC,EAAbuC,SACJA,EACFE,KAAKF,SAAqC,OAA7B,EAAGJ,GAAaW,IAAIP,IAAS,EA3BtB,SA4BbE,KAAKF,WACZE,KAAKF,SA7Be,KA8BtBE,KAAKJ,SAAU,IAChB,qBAED,WACEI,KAAKJ,SAAU,MAChB,EA3BgB,I,QCMJU,uBAhBE,WACf,IAAQC,EAAMC,yBAAe,SAAU,CAAEC,UAAW,aAA5CF,EACR,OACE,eAAC,UAAa,CACZX,QAASc,GAAMd,QACfe,UAAW,WAAQD,GAAMN,WACzBN,SAAUY,GAAMZ,SAChBK,OAAQ,CACNS,MAAOL,EAAE,SACTM,QAAS,WAAQH,GAAMN,YACvB,SACDM,GAAMb,S,+pBCKb,IAAMiB,GAAcR,qBAAS,SAACS,GAC5B,IAAQC,EAAuED,EAAvEC,KAAMC,EAAiEF,EAAjEE,QAASC,EAAwDH,EAAxDG,kBAAmBtK,EAAqCmK,EAArCnK,MAAOuK,EAA8BJ,EAA9BI,gBAAiBC,EAAaL,EAAbK,SAE5DC,EAAuB,IADVC,qBAAXC,OAGFC,EAAiBC,IAAMC,OAAO,IAAIC,WAASC,MAAMP,IAAcQ,QAC/DC,EAAgBL,IAAMC,OAC1BC,WAASI,OAAOP,EAAgB,CAC9BQ,QAAS,EACTlC,SAAUoB,EACVe,iBAAiB,KAEnBJ,QACIK,EAAiBT,IAAMC,OAC3BC,WAASI,OAAOP,EAAgB,CAC9BQ,QAASX,EACTvB,SAAUoB,EACVe,iBAAiB,KAEnBJ,QASF,OAPAJ,IAAMU,WAAU,WACVnB,EACFc,EAAcM,QAEdF,EAAeE,UAChB,CAACpB,IAGF,gBAACW,GAAA,QAASU,KAAI,CACZC,MAAO,CACLC,GAAOC,UACP,CACEjB,OAAQF,EACRoB,UAAW,CAAC,CAAEC,WAAYlB,MAE5B,UAEF,gBAACa,GAAA,QAAI,CAACC,MAAOC,GAAOI,OAAO,UACzB,eAACC,GAAA,QAAI,CAACC,QAAQ,aAAaP,MAAOC,GAAO3L,MAAM,SAAEA,IACjD,eAACkM,GAAA,QAAU,CAACC,KAAK,QAAQC,KAAM,GAAIV,MAAOC,GAAOU,SAAUpC,QAASI,OAEtE,eAACiC,GAAA,QAAU,SAAK/B,GAAe,aAC5BC,WAMHmB,GAASY,WAAWC,OAAO,CAC/BZ,UAAW,CACTa,SAAU,WACVC,OAAQ,EACRC,KAAM,EACNC,MAAO,OACPC,gBAAiB,UACjBC,aAAc,GACdC,SAAU,UAEZhB,OAAQ,CACNa,MAAO,OACPC,gBAAiB,UACjBG,gBAAiB,IAEnBhN,MAAO,CACLiN,UAAW,SACXC,MAAO,cAETb,SAAU,CACRI,SAAU,WACVS,MAAO,aACPC,IAAK,EACLC,MAAO,KAIIlD,M,SChGFmD,GAA4B,YAAhBC,WAASC,IAAoC,QAAhBD,WAASC,GCiBzD5B,IDhBgB2B,WAASC,GACW,UAAhBD,WAASC,IAAkBD,WAASC,GCe/ChB,WAAWC,OAAO,CAC/BZ,UAAW,CACT4B,KAAM,EACNX,gBAAiB,WAEnBY,WAAY,CACVb,MAAO,IACPjC,OAAQ,OACR+C,YAAa,EAAI,GACjBC,OAAQ,OACRZ,SAAU,SACVD,aAAc,OAIHc,GA5BM,SAACzD,GACpB,IAAQK,EAAaL,EAAbK,SACR,OAAI6C,GACK,eAAC,WAAc,UAAE7C,IAExB,eAACiB,GAAA,QAAI,CAACC,MAAOC,GAAOC,UAAU,SAC5B,eAACH,GAAA,QAAI,CAACC,MAAOC,GAAO8B,WAAW,SAC5BjD,O,8BCFM,SAASqD,GAAmBC,EAAqBnH,GAC9D,IAAQoH,EAAqDpH,EAArDoH,UAAWC,EAA0CrH,EAA1CqH,eAAgBC,EAA0BtH,EAA1BsH,QAASC,EAAiBvH,EAAjBuH,aAC5C,OAAOJ,EAAQK,MAAK,SAACzH,GAKnB,OAJIqH,GACFA,EAAUrH,GACRsH,GACFI,GAAc9E,QAAQ0E,GACjBtH,KACN2H,OAAM,SAAC7M,GAAW,IAAD,EAGlB,GAFIyM,GACFA,EAAQzM,GACN0M,EAAc,CAChB,cAAeA,GACb,IAAK,SACH,OAAOE,GAAc9E,QAAQ4E,EAAc,CAAEhF,SAAU,SACzD,IAAK,UACH,IAAKoF,yBAAc9M,GACjB,MACF,IAAM+M,EAAkC,OAAzB,EAAG/M,EAAMgN,cAAc,SAAE,EAAtB,EAAwBC,WAAWC,KACrD,GAAyB,kBAAdH,EACT,MACF,OAAOH,GAAc9E,QAAQ7D,EAAKkE,EAAE,CAAC4E,EAAW,YAAa,CAAEI,GAAI,WAAa,CAAEzF,SAAU,SAGhGkF,GAAc9E,QAAQ7D,EAAKkE,EAAE,WAAY,CAAEgF,GAAI,WAAa,CAAEzF,SAAU,a,mfCjCd,I,MA0BjD0F,GAxBA,kCACb,WAAoBC,EAA2DlI,GAAiC,IAAD,EAAF,OAAE,cAC7G,gBADkBkI,QAAiD,EAAUlI,OAA8B,EAoB5G,OAlBA,mCAKD,WACE,MAAoB,cAAhByC,KAAK0F,OACA1F,KAAK2F,OACP3F,KAAK4F,oBAAmB,MAAxB5F,KAAI,aACZ,iCAKD,WACE,IAAM0E,EAAU1E,KAAKyF,MAAK,MAAVzF,KAAI,WAEpB,OADAA,KAAK6F,MAAMnB,EAAS1E,KAAKzC,MAClBmH,MACR,EArBY,CCSc,WAM3B,aAAe,kBALRoB,gBAAqCxH,EAAU,KAC/CyH,eAA+BzH,EAAU,KACzCoH,YAAoCpH,EAAU,KAC7C0H,eAA6C,KAGnDjG,0BAAeC,KAAM,CACnB8F,WAAY7F,cACZ8F,UAAW9F,cACXyF,OAAQzF,cACRgG,UAAW9F,UACX+F,SAAU/F,UACVgG,MAAOhG,UACP0F,MAAO1F,UACPwF,OAAQS,YACRhO,MAAOgO,YACPC,SAAUD,YACVE,QAASF,YACTG,SAAUH,cA+Eb,OA7EA,+BAED,SAAiBT,GACf3F,KAAK8F,WAAaH,EAClB3F,KAAK+F,eAAYzH,EACjB0B,KAAK0F,OAAS,cACf,sBAED,SAAgBtN,GACd4H,KAAK+F,UAAY3N,EACjB4H,KAAK8F,gBAAaxH,EAClB0B,KAAK0F,OAAS,aACf,mBAED,WACE1F,KAAK8F,gBAAaxH,EAClB0B,KAAK+F,eAAYzH,EACjB0B,KAAK0F,YAASpH,EACd0B,KAAKgG,eAAiB,OACvB,kBAED,WACE,GAAoB,YAAhBhG,KAAK0F,OAET,OAAO1F,KAAK8F,aACb,iBAED,WACE,GAAoB,YAAhB9F,KAAK0F,OAET,OAAO1F,KAAK+F,YACb,oBAED,WACE,YAAuBzH,IAAhB0B,KAAK0F,SACb,mBAED,WACE,MAAuB,YAAhB1F,KAAK0F,SACb,oBAED,WACE,MAAuB,cAAhB1F,KAAK0F,QAA0C,aAAhB1F,KAAK0F,SAC5C,mBAED,SAAahB,EAA8BnH,GAAiC,IAAD,OAEvEiJ,EAMEjJ,EANFiJ,cACAC,EAKElJ,EALFkJ,YACAC,EAIEnJ,EAJFmJ,eACAC,EAGEpJ,EAHFoJ,aACAC,EAEErJ,EAFFqJ,iBACAC,EACEtJ,EADFsJ,eAEF7G,KAAKgG,eAAiBtB,EACtB1E,KAAK0F,OAAS,UACdhB,EAAQK,MAAK,SAACY,GACRjB,IAAY,EAAKsB,gBAIrB,EAAKC,UAAUN,GACF,MAAba,KAAgBb,IAJH,MAAXc,KAAcd,MAKfV,OAAM,SAAC7M,GACJsM,IAAY,EAAKsB,gBAIrB,EAAKE,SAAS9N,GACA,MAAdsO,KAAiBtO,IAJH,MAAZuO,KAAevO,MAKhB0O,SAAQ,WACLpC,GAAW,EAAKsB,eAIJ,MAAhBY,OAHgB,MAAdC,cAKL,EAlG0B,ICYdE,GAvBA,WACb,aAA6C,IAA1BC,EAAe,wDAAQ,kBAAvBA,SACjBjH,0BAAeC,KAAM,CACnBgH,OAAQ/G,cACRe,KAAMb,UAAO8G,MACbhN,MAAOkG,UAAO8G,MACdC,OAAQ/G,UAAO8G,QAclB,OAZA,0BAED,WACEjH,KAAKgH,QAAS,IACf,mBAED,WACEhH,KAAKgH,QAAS,IACf,oBAED,WACEhH,KAAKgH,QAAUhH,KAAKgH,WACrB,EApBY,GCoBAG,GApBI,WAGjB,aAAe,kBAFRb,SAAmB,EAGxBvG,0BAAeC,KAAM,CACnBsG,QAASrG,cACTmH,WAAYjH,UACZkH,UAAWlH,YAUd,OARA,gCAED,WACEH,KAAKsG,SAAU,IAChB,uBAED,WACEtG,KAAKsG,SAAU,MAChB,EAjBgB,G,8BCCbgB,GAAQC,eAAG,mHAsBF,SAAeC,KAAa,gCAG1C,6BAHc,YAEb,aADkBC,EAAaH,MAA0B,CAAEA,YAChDI,KAAKC,OAAOxP,eACxB,sBCzBD,IAAMmP,GAAQC,eAAG,yJA0BF,SAAeK,KAAa,gCAG1C,6BAHc,YAEb,aADkBH,EAAaH,MAA6B,CAAEA,SAAOO,YAAa,cACvEH,KAAKC,OAAO/P,eACxB,sBC/BoD,I,GAsBtC,OApBA,0CACNO,WAAa,IAAIqN,GAAUgC,GAAe,CAAEd,eAAgBoB,QAAQ1P,QAAS,KAC7ER,WAAa,IAAI4N,GAAUoC,GAAe,CAAElB,eAAgBoB,QAAQ1P,QAAS,KAC7E2P,kBAAoB,IAAIhB,GAc9B,OAdyC,iCAE1C,WACE,OAAOiB,QAAQC,IAAI,CACjBjI,KAAK7H,WAAWyN,sBAChB5F,KAAKpI,WAAWgO,0BAEnB,qBAED,WACE,OAAOoC,QAAQC,IAAI,CACjBjI,KAAK7H,WAAW+P,gBAChBlI,KAAKpI,WAAWsQ,sBAEnB,EAjBY,ICATZ,GAAQC,eAAG,yOAqCF,SAAeY,KAAe,gCAG5C,6BAHc,YAEb,aADkBV,EAAaH,MAA4B,CAAEA,SAAOO,YAAa,cACtEH,KAAKU,cAAcvO,iBAC/B,sBCzCuC,I,MAuBzB,OArBQ,WAGrB,aAAe,kBAFRA,aAAe,IAAI2L,GAAU2C,GAAiB,CAAEzB,eAAgBoB,QAAQ1P,QAG7E2H,0BAAeC,KAAM,CACnBqI,aAAcjC,cAajB,OAXA,gCAED,WACE,IAAMnO,EAAY+H,KAAKnG,aAAa8L,OACpC,OAAK1N,GAAaA,EAAUqQ,QAAU,EAC7B,KACFrQ,EAAUA,EAAUqQ,OAAS,KACrC,qBAED,WACE,OAAOtI,KAAKnG,aAAa+L,0BAC1B,EAlBoB,ICDjB0B,GAAQC,eAAG,qIAwBF,SAAegB,KAAS,gCAGtC,6BAHc,YAEb,aADkBd,EAAaH,MAAyB,CAAEA,YAC/CI,KAAKU,cAAcI,cAC/B,sBC3BD,IAAMlB,GAAQC,eAAG,kHAkBF,SAAekB,KAAgB,gCAG7C,6BAHc,YAEb,aADkBhB,EAAaH,MAAgC,CAAEA,YACtDI,KAAKU,cAAcxQ,WAAW8Q,gBAC1C,sBCvBmD,IAYrC,OAVG,0CACT1Q,QAAU,IAAIwN,GAAU+C,GAAW,CAAE7B,eAAgBoB,QAAQ1P,QAAS,KACtEuQ,iBAAmB,IAAInD,GAAUiD,GAAkB,CAAE/B,eAAgBoB,QAAQ1P,QAKnF,OAL2F,mDAE5F,kBACQ4H,KAAKhI,QAAQ4N,4BACb5F,KAAK2I,iBAAiB/C,yBAC7B,kDAL2F,MAK3F,EAPe,ICEX,SAASgD,KAEdnE,GADgBoE,GAAUC,UACD,CAAElE,eAAgB,KAAME,cAAc,IAG1D,SAASiE,KAEdtE,GADgBuE,GAAkBF,UACT,CAAElE,eAAgB,KAAME,cAAc,IAG1D,SAASmE,KAEdxE,GADgByE,GAAaJ,UACJ,CAAElE,eAAgB,KAAME,cAAc,I,+BCb3DqE,GAAW5B,eAAG,2UCDpB,I,GAAM4B,GAAW5B,eAAG,kSAiBL,SAAS6B,GAASC,GAC/B,OAAO5B,EAAa6B,OAAO,CAAEH,YAAUE,cChBzC,I,GAAM/B,GAAQC,eAAG,8KAiChB,6BAHc,YAEb,aADkBE,EAAaH,MAA0B,CAAEA,YAChDI,KAAKU,cAAcmB,YAC/B,sBCnCD,I,GAAMjC,GAAQC,eAAG,oKAsBF,SAAeiC,GAAqB,GAAD,gCAGjD,6BAHc,UAAoCH,GAEjD,aADkB5B,EAAaH,MAAoC,CAAEA,SAAO+B,eACjE3B,KAAKC,OAAO4B,QAAQE,yBAChC,sBCzBD,I,GAAMN,GAAW5B,eAAG,4IAcL,SAASmC,GAAYL,GAClC,OAAO5B,EAAa6B,OAAO,CAAEH,YAAUE,cCfzC,I,GAAMF,GAAW5B,eAAG,gJAcL,SAASoC,GAA4BN,GAClD,OAAO5B,EAAa6B,OAAO,CAAEH,YAAUE,cCfzC,I,GAAMF,GAAW5B,eAAG,uHCApB,I,GAAM4B,GAAW5B,eAAG,kJAcL,SAASqC,GAAeP,GACrC,OAAO5B,EAAa6B,OAAO,CAAEH,YAAUE,cCfzC,IAAMF,GAAW5B,eAAG,ySAwBL,SAASsC,GAAcR,GACpC,OAAO5B,EAAa6B,OAAO,CAAEH,YAAUE,cCZ1B,IAkEA,OAhEG,WAGhB,aAAe,kBAFfS,KAAoB,KAAK,KAoClBxT,SAAWyT,GAAiB,KAG5BN,qBAAuBD,GAAqB,KAE5CQ,YAAcN,GAAY,KAE1BO,4BAA8BN,GAA4B,KAe1DtT,eAAiBuT,GAAe,KAEhCM,cAAgBL,GAzDrB9J,0BAAeC,KAAM,CACnB8J,KAAM7J,cACNkK,QAAShK,UACTiK,SAAUhE,YACViE,UAAWjE,cAiDd,OA/CA,6BAED,SAAQ0D,GACN9J,KAAK8J,KAAOA,IACb,oBAED,WACE,OAAqB,OAAd9J,KAAK8J,OACb,qBAED,WACE,OAAqB,OAAd9J,KAAK8J,OACb,yCAED,UAAmBT,GACjB,IAAQ3B,STMG,SAAe2B,GAC5B,OAAO5B,EAAa6B,OAAsB,CAAEH,YAAUE,cSP7BiB,CAAcjB,IAA7B3B,KACR6C,KAAO7C,GACP,MAAwBA,EAAKC,OAAO4B,QAAQ7P,MAApCoQ,EAAI,EAAJA,KAAMvL,EAAK,EAALA,MACdyB,KAAKmK,QAAQL,SACPtL,EAAQb,Q7B5CU,a6B4CYY,EAAO,CAAEf,QAAQ,OACtD,mDARA,IAQA,0CAED,kBACQgB,EAAQV,W7BhDU,a6BgDe,CAAEN,QAAQ,IACjDwC,KAAKmK,QAAQ,SACd,kDALA,IAKA,kDAWD,YAEE,GAAkB,cADM3L,EAAQZ,Q7B9DR,a6B8D8B,CAAEJ,QAAQ,KAChE,CAEA,IAAM+L,QPjCK,WAAyB,gCOiCdiB,GACtBxK,KAAKmK,QAAQZ,OACd,kDAjBA,IAiBA,iDAED,kBH1DO9B,EAAa6B,OAAO,CAAEH,oBG4DrBnJ,KAAKtH,YACZ,kDALA,MAKA,EAzDe,ICdZ+R,GAAe,WAKnB,aAAe,kBAFRC,oBAAsC,KAG3C3K,0BAAeC,KAAM,CACnB0K,oBAAqBzK,cACrB0K,uBAAwBxK,YAgB3B,OAdA,4CAED,SAA8ByK,GAC5B5K,KAAK0K,oBAAsBE,IAC5B,qCAED,WACE,OAAOpM,EAAQb,QAAQ8M,EAAgBI,qBAAsB,eAC9D,2CAED,YACE,IAAMC,QAAwBtM,EAAQZ,QAAQ6M,EAAgBI,sBAE9D7K,KAAK2K,uBAA2C,OAApBG,IAA6B7G,OAC1D,kDANA,MAMA,EAxBkB,GAAfwG,GACWI,qBAAuB,YA0BzB,WAAIJ,G,mbC5BwB,I,MAmB5B,OAjBD,kCACZ,aAAe,IAAD,EAEuB,OAFvB,cACZ,gBACK3B,UAAU7D,MAAM6C,QAAQiD,MAAM,EAWpC,OAVA,mDAED,YACE/K,KAAKoH,mBACCY,QAAQgD,WAAW,CACvBC,GAAgBnC,UAChBoC,GAAaC,iBACbtC,GAAUC,YAEZ9I,KAAKqH,eACN,kDAVA,MAUA,EAdW,CAASF,K,UCMjB5E,GAASY,WAAWC,OAAO,CAC/BZ,UAAW,CACT4B,KAAM,EACNgH,WAAY,SACZC,eAAgB,SAChB5H,gBAAiB,aAIN6H,GAjBC,WACd,OACE,eAACjJ,GAAA,QAAI,CAACC,MAAOC,GAAOC,UAAU,SAC5B,eAAC+I,GAAA,QAAiB,CAACvI,KAAK,a,4GCHxBmG,GAAW5B,eAAG,sIAcL,SAASiE,GAAenC,GACrC,OAAO5B,EAAa6B,OAAgB,CAAEH,YAAUE,cCflD,I,GAAMF,GAAW5B,eAAG,sJAcL,SAASkE,GAAsBpC,GAC5C,OAAO5B,EAAa6B,OAAgB,CAAEH,YAAUE,cCflD,IAAMF,GAAW5B,eAAG,oOAiBL,SAASmE,GAAerC,GACrC,OAAO5B,EAAa6B,OAAO,CAAEH,YAAUE,cCjBzB,IAUD,OARI,qCACVjP,OAASoR,GAAe,KAExBlR,cAAgBmR,GAAsB,KAEtCrI,OAASsI,OCgFZnJ,GAASY,WAAWC,OAAO,CAC/BuI,KAAM,CACJC,SAAU,GACV9H,MAAO,UACP+H,WAAY,IAEdC,UAAW,CACTF,SAAU,GACVG,WAAY,UAIDC,GA1EE,SAACjL,GAA0B,IAAD,IACjCkL,EAA2DlL,EAA3DkL,SAAUC,EAAiDnL,EAAjDmL,gBAAiBC,EAAgCpL,EAAhCoL,SAAUC,EAAsBrL,EAAtBqL,kBACrC7L,EAAMC,yBAAe,SAAU,CAAEC,UAAW,kBAA5CF,EACR,EAA4CkB,IAAM4K,UAAS,GAAM,YAA1DC,EAAc,KAAEC,EAAiB,KACxC,OACE,gBAACC,GAAA,QAAI,CACH5M,QAAS0M,EACT3L,UAAW,kBAAM4L,GAAkB,IACnCE,OACE,eAAC,WAAI,CACHnK,MAAO,CACLC,GAAOoJ,KACP,CAAEI,WAAab,GAAapB,OAAsB,OAAd,EAAAmC,EAASS,YAAK,EAAd,EAAgBC,MAAOzB,GAAapB,KAAK6C,GAAK,YAASrO,IAE7FuC,QAAS,kBAAM0L,GAAkB,IAAM,SAEtCN,EAASN,OAGdiB,eAAe,SAAQ,UAEvB,eAACJ,GAAA,QAAKK,KAAI,CACRC,WAAYvK,GAAOuJ,UACnBlV,QAAwB,OAAd,EAAAqV,EAASS,YAAK,EAAd,EAAgBlW,WAAY+J,EAAE,gBAAc,MAAMwM,mBAAOd,EAASe,UAAWzM,EAAE,sBAE3F,eAAC0M,GAAA,QAAO,IACR,eAACT,GAAA,QAAKK,KAAI,CACRjW,MAAO2J,EAAE,UACT2M,YAAY,QACZC,SAAUjB,GAAiD,OAA9BD,EAASmB,iBACtCvM,QAAS,WAEP4D,GADgB4I,GAAcjT,OAAO,CAAEkT,WAAYrB,EAASU,KACnC,CACvB/H,eAAgBrE,EAAE,qBAClBoE,UAAW,WACT4H,GAAkB,GACV,MAARJ,KAAWF,IAEbnH,cAAc,OAIpB,eAAC0H,GAAA,QAAKK,KAAI,CACRjW,MAAO2J,EAAE,iBACT2M,YAAY,eACZC,SAAUjB,GAAiD,OAA9BD,EAASmB,iBACtCvM,QAAS,WAEP4D,GADgB4I,GAAc/S,cAAc,CAAEgT,WAAYrB,EAASU,KAC1C,CACvB/H,eAAgBrE,EAAE,4BAClBoE,UAAW,WACT4H,GAAkB,GACD,MAAjBH,KAAoBH,IAEtBnH,cAAc,W,4nBCnE1B,IAoBeyI,GApBO,SAACxM,GACrB,IAAQmL,EAAiEnL,EAAjEmL,gBAAiBC,EAAgDpL,EAAhDoL,SAAUC,EAAsCrL,EAAtCqL,kBAAsBoB,EAAW,KAAKzM,EAAK,IAC9E,OACE,eAAC0M,GAAA,QAAQ,SACHD,GAAW,IACfE,WAAY,gBAAGC,EAAI,EAAJA,KAAI,OACjB,eAAC,GAAQ,CACP1B,SAAU0B,EACVzB,gBAAiBA,EACjBC,SAAUA,EACVC,kBAAmBA,KAGvBwB,aAAc,SAACD,GAAI,OAAKA,EAAKhB,GAAGkB,YAChCC,mBAAoBvC,WACpBwC,uBAAwB,kBAAM,eAACd,GAAA,QAAO,CAACe,MAAI,EAAC1L,MAAO,CAAEkB,MAAO,KAAMC,gBAAiB,oB,+qBCvBzF,IAqDMlB,GAASY,WAAWC,OAAO,CAC/BZ,UAAW,CACT+B,OAAQ,GACRd,gBAAiB,UACjBwK,QAAS,GACTvK,aAAc,GACdwK,YAAa,EACbC,YAAa,WAEfvX,MAAO,CACLmV,WAAY,OACZqC,eAAgB,IAElBvX,SAAU,CACRwX,aAAc,IAEhBC,UAAW,CACT1C,SAAU,GACVrK,OAAQ,GACRsC,UAAW,UAEb0K,cAAe,CACbC,UAAW,MAIAC,GAtEa,SAAC1N,GAC3B,IAAQ2N,EAA4E3N,EAA5E2N,WAAYC,EAAgE5N,EAAhE4N,aAAcC,EAAkD7N,EAAlD6N,gBAAiBC,EAAiC9N,EAAjC8N,aAAiBrB,EAAW,KAAKzM,EAAK,IACjFR,EAAMC,yBAAe,SAAU,CAAEC,UAAW,wBAA5CF,EACR,EAAkDkB,IAAM4K,UAAS,GAAM,YAAhEyC,EAAiB,KAAEC,EAAoB,KACxCC,EAAiBvN,IAAMwN,SAAQ,iBAAM,GAAGC,SAASR,EAAY,OAAM,CAACA,IAE1E,OACE,gBAACS,GAAA,QAAK,SAAK3B,GAAW,IAAE4B,aAAa,EAAOC,sBAAuB9M,GAAOC,UAAU,UAClF,eAACI,GAAA,QAAI,CAACC,QAAQ,aAAaP,MAAOC,GAAO3L,MAAM,SAAE2J,EAAE,WACnD,eAACqC,GAAA,QAAI,CAACC,QAAQ,aAAaP,MAAOC,GAAO1L,SAAS,SAAE0J,EAAE,cACtD,eAAC+O,GAAA,QAAS,CACRC,KAAK,WACL1L,UAAU,SACV2L,YAAaR,EACb1M,MAAOC,GAAO+L,UACdmB,gBAAgB,cAChBC,aAAa,aACbC,UAAWjB,EACXkB,aAAc,SAAAjE,GACA,MAAZgD,KAAehD,GACXA,EAAKrD,QAAUoG,IACjBmB,WAASzP,UACTwO,EAAgBjD,OAItB,eAACmE,GAAA,QAAM,CACL/M,KAAK,SACLT,MAAOC,GAAOgM,cACd1N,QAAS,WACPkO,GAAqB,GACrBgB,YAAW,WACThB,GAAqB,KAzCG,KA2C1BF,KAEF1B,SAAU2B,EAAkB,SAE3BvO,EAAE,qB,mBC1BLgC,GAASY,WAAWC,OAAO,CAC/B4M,IAAK,CACH3M,SAAU,WACVW,MAAO,GACPV,OAAQ,MAIG2M,GA3BU,WACvB,IAAMC,EAAaC,2BACX5P,EAAMC,yBAAe,SAAU,CAAEC,UAAW,qBAA5CF,EAER,OACE,eAAC6P,GAAA,QAAG,CACFrN,KAAK,cACLnC,MAAOL,EAAE,eACT+B,MAAOC,GAAOyN,IACdnP,QAAS,WACmB,OAAtBqK,GAAapB,KACfoG,EAAWG,SAAS,gBAEpBH,EAAWG,SAAS,a,UCdxBC,GAAOhQ,qBAAS,WAAO,IAAD,IAClBC,EAAMC,yBAAe,UAAW,CAAEC,UAAW,cAA7CF,EACR,OACE,eAACgQ,GAAA,QAAe,CAACC,OAAQC,EAAO7W,KAAKuD,eAAgBuT,WAAW,QAAQpO,MAAOC,GAAOC,UAAU,SAC9F,gBAACH,GAAA,QAAI,CAACC,MAAOC,GAAOoO,YAAY,UAC9B,eAAC/N,GAAA,QAAI,CAACC,QAAQ,aAAY,SAAEtC,EAAE,WAC9B,eAACqC,GAAA,QAAI,CAACC,QAAQ,gBAAgBP,MAAO,CAAEyJ,WAAY,QAAS,UAC3B,OAD2B,EACrC,OADqC,EACtDb,GAAapB,WAAI,EAAjB,EAAmBtT,UAAQ,EAAI+J,EAAE,UAAQ,MAE/C,eAACuC,GAAA,QAAU,CACTC,KAAK,MACLC,KAAM,GACNV,MAAOC,GAAOqO,aACd/P,QAASH,GAAMqH,kBAAkBb,iBAOrC3E,GAASY,WAAWC,OAAO,CAC/BZ,UAAW,CACTgB,MAAO,OACPqN,UAAW,IACXC,uBAAwB,GACxBC,wBAAyB,GACzBpN,SAAU,UAEZgN,YAAa,CACXvM,KAAM,EACN4M,WAAY,GACZC,YAAa,GACbxN,gBAAiB,uBAEnBmN,aAAc,CACZvN,SAAU,WACVU,IAAK,GACLC,MAAO,KAIIsM,M,ylBC3Cf,IAAMY,GAAa5Q,qBAAS,WAC1B,IAAQC,EAAMC,yBAAe,UAAW,CAAEC,UAAW,oBAA7CF,EACF4Q,EAAc,SAAC7T,GAAyB,YAClCgB,IAAVhB,EAAsBA,EAAMuQ,WAAatN,EAAE,cAEvC3I,EAAa8I,GAAM9I,WAAWkO,WACpC,OACE,gBAACsL,GAAA,QAAI,CAAC9O,MAAOC,GAAOC,UAAU,UAC5B,eAAC4O,GAAA,QAAKC,MAAK,CACTza,MAAO2J,EAAE,SACT+Q,aAAa,aACbxE,WAAY,CAAEf,WAAY,QAC1B/H,MAAO,SAACjD,GAAK,OACX,eAAC,UAAOwQ,KAAI,SACNxQ,GAAK,IACTgC,KAAK,cACLe,MAAM,aACNd,KAAM,GACNV,MAAO,CAAEmB,gBAAiB,qBAIhC,gBAAC2N,GAAA,QAAKI,QAAO,WACX,eAAC,QAAK3E,KAAI,CACRjW,MAAOua,EAAsB,MAAVvZ,OAAU,EAAVA,EAAYE,OAC/BX,YAAaoJ,EAAE,eACfgD,KAAM,SAAAxC,GAAK,OAAI,eAAC,QAAKwQ,KAAI,SAAKxQ,GAAK,IAAEgC,KAAK,oBAC1CT,MAAOC,GAAOkP,YAEhB,eAAC,QAAK5E,KAAI,CACRjW,MAAOua,EAAsB,MAAVvZ,OAAU,EAAVA,EAAY8Z,WAC/Bva,YAAaoJ,EAAE,eACfgD,KAAM,SAAAxC,GAAK,OAAI,eAAC,QAAKwQ,KAAI,SAAKxQ,GAAK,IAAEgC,KAAK,gBAC1CT,MAAOC,GAAOkP,YAEhB,eAAC,QAAK5E,KAAI,CACRjW,MAAOua,EAAsB,MAAVvZ,OAAU,EAAVA,EAAYI,SAC/Bb,YAAaoJ,EAAE,iBACfgD,KAAM,SAAAxC,GAAK,OAAI,eAAC,QAAKwQ,KAAI,SAAKxQ,GAAK,IAAEgC,KAAK,wBAC1CT,MAAOC,GAAOkP,YAEhB,eAAC,QAAK5E,KAAI,CACRjW,MAAOua,EAAsB,MAAVvZ,OAAU,EAAVA,EAAYK,WAC/Bd,YAAaoJ,EAAE,mBACfgD,KAAM,SAAAxC,GAAK,OAAI,eAAC,QAAKwQ,KAAI,SAAKxQ,GAAK,IAAEgC,KAAK,WAC1CT,MAAOC,GAAOkP,qBAOlBlP,GAASY,WAAWC,OAAO,CAC/BZ,UAAW,CACTgM,UAAW,GACX/K,gBAAiB,WAEnBgO,UAAW,CACT7N,gBAAiB,KAINsN,M,skBCzDf,IAAMS,GAAarR,qBAAS,WAC1B,IAAM4P,EAAaC,2BACX5P,EAAMC,yBAAe,UAAW,CAAEC,UAAW,oBAA7CF,EACR,OACE,eAAC6Q,GAAA,QAAI,CACH9O,MAAOC,GAAOC,UACd3B,QAAS,WAAO,IAAD,EACP+Q,EAAqC,OAA9B,EAAGlR,GAAMvI,WAAW2N,iBAAU,EAA3B,EAA6B6G,GAC7CpC,UAAmBjM,IAAZsT,GACP1B,EAAWG,SAAS,cAAe,CAAEuB,aACrC,SAEF,eAACR,GAAA,QAAKC,MAAK,CACTza,MAAO2J,EAAE,SACT1J,SAAU0J,EAAE,YACZ+Q,aAAa,aACbxE,WAAY,CAAEf,WAAY,QAC1B/H,MAAO,SAACjD,GAAK,OACX,eAAC,UAAOwQ,KAAI,SACNxQ,GAAK,IACTgC,KAAK,iBACLe,MAAM,aACNd,KAAM,GACNV,MAAO,CAAEmB,gBAAiB,0BAQhClB,GAASY,WAAWC,OAAO,CAC/BZ,UAAW,CACTgM,UAAW,GACX/K,gBAAiB,aAINkO,MCTTpP,GAASY,WAAWC,OAAO,CAC/BZ,UAAW,CACTgM,UAAW,GACX/K,gBAAiB,aAINoO,GAtCG,WAChB,IAAQtR,EAAMC,yBAAe,UAAW,CAAEC,UAAW,mBAA7CF,EACF2P,EAAaC,2BACnB,OACE,eAACiB,GAAA,QAAI,CACH9O,MAAOC,GAAOC,UACd3B,QAAS,WACmB,OAAtBqK,GAAapB,KACfoG,EAAWG,SAAS,WAEpBH,EAAWG,SAAS,UACtB,SAEF,eAACe,GAAA,QAAKC,MAAK,CACTza,MAAO2J,EAAE,SACT1J,SAAU0J,EAAE,YACZ+Q,aAAa,aACbxE,WAAY,CAAEf,WAAY,QAC1B/H,MAAO,SAACjD,GAAK,OACX,eAAC,UAAOwQ,KAAI,CACVxO,KAAK,YACLe,MAAM,aACNd,KAAM,GACNV,MAAO,CAAEmB,gBAAiB,uB,0lBClBtC,IA4FeqO,GA5FOxR,qBAAS,WAC7B,IAAQC,EAAMC,yBAAe,UAAW,CAAEC,UAAW,uBAA7CF,EACF2P,EAAaC,2BACnB,OACE,gBAAC,GAAW,CACVvZ,MAAO2J,EAAE,SACTU,QAASP,GAAMqH,kBAAkB9N,MACjC+G,KAAMN,GAAMqH,kBAAkBf,OAC9B9F,kBAAmB,IACnBC,gBAAiB,CAAEmB,MAAO,CAAE2L,QAAS,KAAO,UAE3C/C,GAAapB,MACZ,eAAC,QAAK+C,KAAI,CACRjW,MAAOsU,GAAapB,KAAKtT,SACzBW,YAAa+T,GAAapB,KAAK5T,MAC/BqN,KAAM,SAAAxC,GAAK,OAAI,eAAC,QAAKwQ,KAAI,SAAKxQ,GAAK,IAAEgC,KAAK,cAC1CT,MAAO,CAAE+L,aAAc,MAI3B,gBAAC,QAAK0D,QAAO,WACX,eAAC,QAAKC,UAAS,UAAEzR,EAAE,aACnB,eAAC,QAAKsM,KAAI,CACRjW,MAAO2J,EAAE,SACTgD,KAAM,SAAAxC,GAAK,OAAI,eAAC,QAAKwQ,KAAI,SAAKxQ,GAAK,IAAEgC,KAAK,kBAC1ClC,QAAS,WACPH,GAAMqH,kBAAkB9N,QACxBiW,EAAWG,SAAS,iBAGxB,eAAC,QAAKxD,KAAI,CACRjW,MAAO2J,EAAE,WACTgD,KAAM,SAAAxC,GAAK,OAAI,eAAC,QAAKwQ,KAAI,SAAKxQ,GAAK,IAAEgC,KAAK,iBAC1ClC,QAAS,WACPoR,WAAQC,WCjDa,2BDiDiBnN,MAAK,SAACoN,GACtCA,GACFF,WAAQG,QCnDS,2BDmDkBnN,MAAM6C,QAAQ1P,UAClD6M,MAAM6C,QAAQ1P,UAGpB8S,GAAad,UACZ,eAAC,QAAKyC,KAAI,CACRjW,MAAO2J,EAAE,UACTgD,KAAM,SAAAxC,GAAK,OAAI,eAAC,QAAKwQ,KAAI,SAAKxQ,GAAK,IAAEgC,KAAK,aAC1ClC,QAAS,WAEP4D,GADgByG,GAAaxS,SACJ,CACvBkM,eAAgBrE,EAAE,iBAClBoE,UAAWjE,GAAMqH,kBAAkB9N,MACnC6K,cAAc,UAOvBoG,GAAad,UACZ,gBAAC,QAAK2H,QAAO,CAACzP,MAAO,CAAE4L,YAAa,EAAGC,YAAa,wBAAyBK,UAAW,IAAK,UAC3F,eAAC,QAAKwD,UAAS,UAAEzR,EAAE,gBACnB,eAAC,QAAKsM,KAAI,CACRjW,MAAO2J,EAAE,iBACTgD,KAAM,SAAAxC,GAAK,OAAI,eAAC,QAAKwQ,KAAI,SAAKxQ,GAAK,IAAEgC,KAAK,aAC1ClC,QAAS,WACPwR,WAAMC,MACJ/R,EAAE,8BACFA,EAAE,oCACF,CACE,CACEoL,KAAMpL,EAAE,+BACR+B,MAAO,UAET,CACEqJ,KAAMpL,EAAE,+BACR+B,MAAO,cACPzB,QAAS,WAEP4D,GADgByG,GAAarS,gBACJ,CACvB+L,eAAgBrE,EAAE,0BAClBuE,cAAc,oBE5EhCyN,GAAOjS,qBAAS,SAACS,GACrB,OACE,gBAACsB,GAAA,QAAI,CAACC,MAAOC,GAAOC,UAAU,UAC5B,gBAACU,GAAA,QAAU,CAACsP,eACV,eAACC,GAAA,QAAc,CACbC,WAAYhS,GAAMvI,WAAWmO,SAAW5F,GAAM9I,WAAW0O,QACzDqM,UAAW,WAETlO,GADgB/D,GAAMkS,cACG,CAAEhO,eAAgB,KAAME,cAAc,OAGpE,UACC,eAAC,GAAI,IACL,gBAACzC,GAAA,QAAI,CAACC,MAAOC,GAAOsQ,eAAe,UAChCnS,GAAMvI,WAAW2N,YAAc,eAAC,GAAU,IAC3C,eAAC,GAAS,IACV,eAAC,GAAU,UAGf,eAAC,GAAgB,IACjB,eAAC,GAAa,UAKdvD,GAASY,WAAWC,OAAO,CAC/BZ,UAAW,CACT4B,KAAM,GAERyO,eAAgB,CACdC,kBAAmB,IAErB9C,IAAK,CACH3M,SAAU,WACVW,MAAO,GACPV,OAAQ,MAIGiP,M,+CCpCTQ,GAAwBC,YAAaC,MAAM,CAC/C/c,MAAO8c,YAAa9c,QAAQgd,WAC5B/c,SAAU6c,YAAaE,aA2FnB3Q,GAASY,WAAWC,OAAO,CAC/BZ,UAAW,CACT4B,KAAM,GAER+O,cAAe,CACbC,iBAAkB,IAEpBC,SAAU,CACRhF,aAAc,IAEhBiF,UAAW,CACTlF,eAAgB,GAElBmF,OAAQ,CACN/E,UAAW,MAIAgF,GAxGD,SAACzS,GACb,IAAQmP,EAAenP,EAAfmP,WACA3P,EAAMC,yBAAe,UAAW,CAAEC,UAAW,UAA7CF,EACFkT,EAAeC,qBACrB,OACE,eAACC,GAAA,QAAY,CAACrR,MAAOC,GAAOC,UAAU,SACpC,eAACoR,GAAA,QAAoB,CACnBC,SAA0B,QAAhB3P,WAASC,GAAe,UAAY,SAC9C2P,uBAAwBL,EACxBnR,MAAO,CAAE8B,KAAM,EAAGiH,eAAgB,UAAW,SAE7C,eAAC,UAAM,CACL0I,cAAe,CACb7d,MAAO,GACPC,SAAU,IAEZ6d,iBAAkBjB,GAClBkB,SAAU,SAAAC,GAGR,OAFArE,WAASzP,UAEFqE,GADS/D,GAAMhH,MAAMwa,GACI,CAC9BtP,eAAgB,KAChBE,cAAc,EACdH,UAAW,WAAQuL,EAAW/J,MAAM,CAAEgO,MAAO,EAAGC,OAAQ,CAAC,CAAEzV,KAAM,eAEnE,SAED,gBAAG0V,EAAY,EAAZA,aAAcC,EAAY,EAAZA,aAAcJ,EAAM,EAANA,OAAQhY,EAAM,EAANA,OAAQqY,EAAO,EAAPA,QAASC,EAAY,EAAZA,aAAY,OACnE,gBAACnS,GAAA,QAAI,CAACC,MAAOC,GAAO4Q,cAAc,UAChC,gBAAC9Q,GAAA,QAAI,CAACC,MAAOC,GAAO8Q,SAAS,UAC3B,eAACzQ,GAAA,QAAI,CAACC,QAAQ,gBAAe,SAAEtC,EAAE,wBACjC,eAACqC,GAAA,QAAI,CAACC,QAAQ,aAAY,SAAEtC,EAAE,iCAEhC,eAAC+O,GAAA,QAAS,CACR1O,MAAOL,EAAE,cACTgP,KAAK,WACLG,aAAa,gBACbD,gBAAgB,eAChBzL,MAAO,eAACsL,GAAA,QAAUiC,KAAI,CAACxO,KAAK,UAC5BT,MAAOC,GAAO+Q,UACdhW,MAAO4W,EAAOhe,MACd0Z,aAAcyE,EAAa,SAC3Bjc,MAAOqc,QAAQvY,EAAOhG,QAAUqe,EAAQre,QAE1C,eAACoZ,GAAA,QAAS,CACR1O,MAAOL,EAAE,iBACTgP,KAAK,WACLmF,iBAAe,EACfjF,gBAAgB,WAChBzL,MAAO,eAACsL,GAAA,QAAUiC,KAAI,CAACxO,KAAK,SAC5BT,MAAOC,GAAO+Q,UACdhW,MAAO4W,EAAO/d,SACdyZ,aAAcyE,EAAa,YAC3Bjc,MAAOqc,QAAQvY,EAAO/F,WAAaoe,EAAQpe,WAE7C,eAAC2Z,GAAA,QAAM,CACLP,KAAK,YACLjN,MAAOC,GAAOgR,OACdpG,SAAUqH,EACVlO,QAASkO,EACT3T,QAAS,WAAQyT,KAAkB,SAElC/T,EAAE,iBAEL,eAACuP,GAAA,QAAM,CACLP,KAAK,WACLjN,MAAOC,GAAOgR,OACd1S,QAAS,WAAQqP,EAAWG,SAAS,aAAe,SAEnD9P,EAAE,mBAEL,eAACuP,GAAA,QAAM,CACLP,KAAK,OACLjN,MAAOC,GAAOgR,OACd1S,QAAS,kBAAMqP,EAAWG,SAAS,mBAAkB,SAEpD9P,EAAE,oC,yOCpEnB,IAAMoU,GAA2B3B,YAAaC,MAAM,CAClDzc,SAAUwc,YAAa4B,IrDnCQ,GqDmCeC,IrDlCf,IqDkCsCC,QAAQ9X,GAAyBkW,WACtGhd,MAAO8c,YAAa9c,QAAQgd,WAC5B/c,SAAU6c,YAAa4B,IrDlCQ,GqDkCe1B,aA4H1C3Q,GAASY,WAAWC,OAAO,CAC/BZ,UAAW,CACT4B,KAAM,GAER+O,cAAe,CACbC,iBAAkB,IAEpBC,SAAU,CACRhF,aAAc,IAEhBiF,UAAW,CACTlF,eAAgB,GAElBmF,OAAQ,CACN/E,UAAW,MAIApF,GAzIE,SAACrI,GAChB,IAAQmP,EAAenP,EAAfmP,WACA3P,EAAMC,yBAAe,UAAW,CAAEC,UAAW,aAA7CF,EACFkT,EAAeC,qBACrB,EAA8DjS,IAAM4K,UAAS,GAAM,YAA5E0I,EAAuB,KAAEC,EAA0B,KACpDC,EAAuBxT,IAAMC,OAA8D,MAEjG,OACE,gBAACiS,GAAA,QAAY,CAACrR,MAAOC,GAAOC,UAAU,UACpC,eAACoR,GAAA,QAAoB,CACnBC,SAA0B,QAAhB3P,WAASC,GAAe,UAAY,SAC9C2P,uBAAwBL,EACxBnR,MAAO,CAAE8B,KAAM,EAAGiH,eAAgB,UAAW,SAE7C,eAAC,UAAM,CACL0I,cAAe,CACbvd,SAAU,GACVN,MAAO,GACPC,SAAU,IAEZ6d,iBAAkBW,GAClBV,SAAU,SAAAC,GACR,IAAQhe,EAAUge,EAAVhe,MAIR,OAHA2Z,WAASzP,UACT6U,EAAqBpT,QAAUqS,EAExBzP,GADS/D,GAAMsJ,YAAY,CAAE9T,UACJ,CAC9B0O,eAAgB,KAChBD,UAAW,kBAAMqQ,GAA2B,IAC5ClQ,cAAc,KAEhB,SAED,gBAAGuP,EAAY,EAAZA,aAAca,EAAU,EAAVA,WAAYZ,EAAY,EAAZA,aAAcJ,EAAM,EAANA,OAAQhY,EAAM,EAANA,OAAQqY,EAAO,EAAPA,QAASC,EAAY,EAAZA,aAAY,OAC/E,gBAACnS,GAAA,QAAI,CAACC,MAAOC,GAAO4Q,cAAc,UAChC,gBAAC9Q,GAAA,QAAI,CAACC,MAAOC,GAAO8Q,SAAS,UAC3B,eAACzQ,GAAA,QAAI,CAACC,QAAQ,gBAAe,SAAEtC,EAAE,wBACjC,eAACqC,GAAA,QAAI,CAACC,QAAQ,aAAY,SAAEtC,EAAE,iCAEhC,eAAC+O,GAAA,QAAS,CACR1O,MAAOL,EAAE,iBACTgP,KAAK,WACLE,gBAAgB,WAChBzL,MAAO,eAACsL,GAAA,QAAUiC,KAAI,CAACxO,KAAK,mBAC5BzF,MAAO4W,EAAO1d,SACdoZ,aAAcyE,EAAa,YAC3Bc,OAAQD,EAAW,YACnB9c,MAAOqc,QAAQvY,EAAO1F,WAAa+d,EAAQ/d,WAE5Cie,QAAQvY,EAAO1F,WAAa+d,EAAQ/d,UAAY,eAAC4e,GAAA,QAAU,CAACC,KAAK,QAAO,SAAE9U,EAAE,yBAC7E,eAAC+O,GAAA,QAAS,CACR1O,MAAOL,EAAE,cACTgP,KAAK,WACLG,aAAa,gBACbD,gBAAgB,eAChBzL,MAAO,eAACsL,GAAA,QAAUiC,KAAI,CAACxO,KAAK,UAC5BT,MAAOC,GAAO+Q,UACdhW,MAAO4W,EAAOhe,MACd0Z,aAAcyE,EAAa,SAC3Bc,OAAQD,EAAW,SACnB9c,MAAOqc,QAAQvY,EAAOhG,QAAUqe,EAAQre,QAE1C,eAACoZ,GAAA,QAAS,CACR1O,MAAOL,EAAE,iBACTgP,KAAK,WACLmF,iBAAe,EACfjF,gBAAgB,WAChBzL,MAAO,eAACsL,GAAA,QAAUiC,KAAI,CAACxO,KAAK,SAC5BT,MAAOC,GAAO+Q,UACdhW,MAAO4W,EAAO/d,SACdyZ,aAAcyE,EAAa,YAC3Bc,OAAQD,EAAW,YACnB9c,MAAOqc,QAAQvY,EAAO/F,WAAaoe,EAAQpe,WAE7C,eAAC2Z,GAAA,QAAM,CACLP,KAAK,YACLjN,MAAOC,GAAOgR,OACdpG,SAAUqH,EACVlO,QAASkO,EACT3T,QAAS,WAAQyT,KAAkB,SAElC/T,EAAE,yBAMb,eAAC,GAAmB,CAClBX,QAASmV,EACTrG,WrDpImC,EqDqInCG,aAAc,WAAO,IAAD,EACZ3Y,EAAoC,OAA/B,EAAG+e,EAAqBpT,cAAO,EAA5B,EAA8B3L,MAC5CqU,UAAiBjM,IAAVpI,GAEPuO,GADgB/D,GAAMuJ,4BAA4B,CAAE/T,UAC3B,CACvB0O,eAAgB,KAChBE,cAAc,KAGlB8J,gBAAiB,SAAC0G,GAChB/K,KAAwC,OAAjC0K,EAAqBpT,SAK5B4C,GAJgB/D,GAAMpK,S,oWAAS,EAC7Bgf,uBACGL,EAAqBpT,UAED,CACvB+C,eAAgBrE,EAAE,wBAClBoE,UAAW,WACTqQ,GAA2B,GAC3B9E,EAAWG,SAAS,UAEtBvL,cAAc,WCjJpBkP,GAAmBhB,YAAaC,MAAM,CAC1C/c,MAAO8c,YAAa9c,QAAQgd,aA4DfqC,GArDY,SAACxU,GAC1B,IAAQyU,EAAoBzU,EAApByU,gBACAjV,EAAMC,yBAAe,UAAW,CAAEC,UAAW,sCAA7CF,EAER,OACE,eAAC,UAAM,CACLwT,cAAe,CACb7d,MAAO,IAET8d,iBAAkBA,GAClBC,SAAU,SAACC,GACT,IAAQhe,EAAUge,EAAVhe,MAER,OAAOuO,GADSyG,GAAa7U,eAAe,CAAEH,UACd,CAC9B0O,eAAgB,KAChBD,UAAW,kBAAM6Q,EAAgBtf,IACjC4O,cAAc,EACdD,QAAS,kBAAMgL,WAASzP,cAE1B,SAED,gBAAGiU,EAAY,EAAZA,aAAca,EAAU,EAAVA,WAAYZ,EAAY,EAAZA,aAAcJ,EAAM,EAANA,OAAQhY,EAAM,EAANA,OAAQqY,EAAO,EAAPA,QAASC,EAAY,EAAZA,aAAY,OAC/E,gBAACnS,GAAA,QAAI,WACH,gBAACA,GAAA,QAAI,CAACC,MAAO,CAAE+L,aAAc,IAAK,UAChC,eAACzL,GAAA,QAAI,CAACC,QAAQ,gBAAe,SAAEtC,EAAE,WACjC,eAACqC,GAAA,QAAI,CAACC,QAAQ,aAAY,SAAEtC,EAAE,iBAEhC,eAAC+O,GAAA,QAAS,CACR1O,MAAOL,EAAE,cACTgP,KAAK,WACLG,aAAa,gBACbD,gBAAgB,eAChBzL,MAAO,eAACsL,GAAA,QAAUiC,KAAI,CAACxO,KAAK,UAC5BzF,MAAO4W,EAAOhe,MACd0Z,aAAcyE,EAAa,SAC3Bc,OAAQD,EAAW,SACnB9c,MAAOqc,QAAQvY,EAAOhG,QAAUqe,EAAQre,QAE1C,eAAC4Z,GAAA,QAAM,CACLP,KAAK,YACLpC,SAAUqH,EACVlO,QAASkO,EACT3T,QAAS,kBAAMyT,KACfhS,MAAO,CAAEkM,UAAW,IAAK,SAExBjO,EAAE,mB,skBC7Cf,IAAMyT,GAAmBhB,YAAaC,MAAM,CAC1CwC,YAAazC,YAAa4B,IvDdK,GuDckB1B,WACjDwC,eAAgB1C,YAAa4B,IvDVQ,GuDUqB1B,aAyE7CyC,GAlEW,SAAC5U,GACzB,IAAQ7K,EAAU6K,EAAV7K,MACAqK,EAAMC,yBAAe,UAAW,CAAEC,UAAW,qCAA7CF,EACF2P,EAAaC,2BAEnB,OACE,eAAC,UAAM,CACL4D,cAAe,CACb0B,YAAa,GACbC,eAAgB,IAElB1B,iBAAkBA,GAClBC,SAAU,SAACC,GAET,OAAOzP,GADSyG,GAAahB,cAAc,SAAKgK,GAAM,IAAEhe,WACxB,CAC9B0O,eAAgB,KAChBD,UAAW,kBAAMuL,EAAWG,SAAS,UACrCvL,cAAc,EACdD,QAAS,kBAAMgL,WAASzP,cAE1B,SAED,gBAAGiU,EAAY,EAAZA,aAAca,EAAU,EAAVA,WAAYZ,EAAY,EAAZA,aAAcJ,EAAM,EAANA,OAAQhY,EAAM,EAANA,OAAQqY,EAAO,EAAPA,QAASC,EAAY,EAAZA,aAAY,OAC/E,gBAACnS,GAAA,QAAI,WACH,gBAACA,GAAA,QAAI,CAACC,MAAO,CAAE+L,aAAc,IAAK,UAChC,eAACzL,GAAA,QAAI,CAACC,QAAQ,gBAAe,SAAEtC,EAAE,WACjC,eAACqC,GAAA,QAAI,CAACC,QAAQ,aAAY,SAAEtC,EAAE,iBAEhC,eAAC+O,GAAA,QAAS,CACR1O,MAAOL,EAAE,oBACTgP,KAAK,WACLmF,iBAAe,EACfjF,gBAAgB,WAChBzL,MAAO,eAACsL,GAAA,QAAUiC,KAAI,CAACxO,KAAK,SAC5BzF,MAAO4W,EAAOuB,YACd7F,aAAcyE,EAAa,eAC3Bc,OAAQD,EAAW,eACnB9c,MAAOqc,QAAQvY,EAAOuZ,cAAgBlB,EAAQkB,cAEhD,eAACnG,GAAA,QAAS,CACR1O,MAAOL,EAAE,uBACTgP,KAAK,WACLqG,eAAe,aACf5R,MAAO,eAACsL,GAAA,QAAUiC,KAAI,CAACxO,KAAK,YAC5B4M,UvD7D2B,EuD8D3BrS,MAAO4W,EAAOwB,eACd9F,aAAcyE,EAAa,kBAC3Bc,OAAQD,EAAW,kBACnB9c,MAAOqc,QAAQvY,EAAOwZ,iBAAmBnB,EAAQmB,eACjDpT,MAAO,CAAEkM,UAAW,MAEtB,eAACsB,GAAA,QAAM,CACLP,KAAK,YACLpC,SAAUqH,EACVlO,QAASkO,EACT3T,QAAS,kBAAMyT,KACfhS,MAAO,CAAEkM,UAAW,IAAK,SAExBjO,EAAE,mBC9CTgC,GAASY,WAAWC,OAAO,CAC/BZ,UAAW,CACT4B,KAAM,EACNiH,eAAgB,SAChByH,kBAAmB,MAIRlJ,GA7BQ,SAAC7I,GACtB,IAAM0S,EAAeC,qBACrB,EAA0BjS,IAAM4K,SAAwB,MAAK,YAAtDnW,EAAK,KAAE2f,EAAQ,KAEtB,OACE,eAAClC,GAAA,QAAY,CAACrR,MAAO,CAAE8B,KAAM,GAAI,SAC/B,eAACwP,GAAA,QAAoB,CACnBC,SAA0B,QAAhB3P,WAASC,GAAe,UAAY,SAC9C2P,uBAAwBL,EACxBnR,MAAO,CAAE8B,KAAM,GAAI,SAEnB,eAAC/B,GAAA,QAAI,CAACC,MAAOC,GAAOC,UAAU,SACjB,OAAVtM,EACC,eAAC,GAAkB,CAACsf,gBAAiB,SAACtf,GAAY2f,EAAS3f,MACzD,eAAC,GAAiB,CAACA,MAAOA,W,SCmBlCqM,GAASY,WAAWC,OAAO,CAC/BZ,UAAW,CACT4B,KAAM,GAER0R,MAAO,CACL1R,KAAM,GACNZ,MAAO,OACPkN,WAAY,WAEdqF,MAAO,CACL3R,KAAM,GACNgH,WAAY,UAEdxU,MAAO,CACLyX,aAAc,GACdzC,SAAU,GACVG,WAAY,OACZjI,MAAO,aACPD,UAAW,UAEb1M,YAAa,CACX2b,kBAAmB,GACnBlH,SAAU,GACVG,WAAY,MACZjI,MAAO,aACPD,UAAW,aAIAmS,GAzDQ,SAACjV,GACtB,IAAQ+U,EAA8B/U,EAA9B+U,MAAOlf,EAAuBmK,EAAvBnK,MAAOO,EAAgB4J,EAAhB5J,YACdqM,EAAUlC,qBAAVkC,MACF0M,EAAaC,2BACnB,OACE,gBAAC9N,GAAA,QAAI,CAACC,MAAO,CAACC,GAAOC,UAAW,CAAEgB,UAAS,UACzC,eAACyS,GAAA,QAAK,CAACzF,OAAQsF,EAAOxT,MAAOC,GAAOuT,QACpC,gBAACzT,GAAA,QAAI,CAACC,MAAOC,GAAOwT,MAAM,UACxB,eAAC,WAAI,CAACzT,MAAOC,GAAO3L,MAAM,SAAEA,SACX0H,IAAhBnH,EACC,eAAC,WAAI,CAACmL,MAAOC,GAAOpL,YAAY,SAAEA,IAElC,eAAC2L,GAAA,QAAU,CACTC,KAAK,qBACLmT,UAAU,aACVlT,KAAM,GACNnC,QAAS,WACPH,GAAMyV,0BAA0BlR,MAAM6C,QAAQ1P,OAC9C8X,EAAWkG,QAAQ,kBCrB3B7T,GAASY,WAAWC,OAAO,CAC/BZ,UAAW,CACT6T,cAAe,MACf9U,OAAQ,IAEV+U,IAAK,CACH9S,MAAO,GACPjC,OAAQ,GACRmC,aAAc,EACdD,gBAAiB,aACjB2P,iBAAkB,KAIPmD,GAzBG,SAACxV,GACjB,IAAQyV,EAA+BzV,EAA/ByV,WAAYC,EAAmB1V,EAAnB0V,eACpB,OACE,eAACpU,GAAA,QAAI,CAACC,MAAOC,GAAOC,UAAU,SAC3BkU,MAAMC,KAAK,CAAErO,OAAQkO,IAAc,SAACpY,EAAGwY,GAAG,OACzC,eAACvU,GAAA,QAAI,CAAWC,MAAO,CAACC,GAAO+T,IAAK,CAAEO,QAAUD,IAAQH,EAAiB,EAAI,MAAlEG,S,+NCgCnB,IAuBMrU,GAASY,WAAWC,OAAO,CAC/BZ,UAAW,CACT4B,KAAM,EACNgH,WAAY,YAID0L,GA9BY,WACzB,IAAMC,EApCR,WACE,IAAQxW,EAAMC,yBAAe,UAAW,CAAEC,UAAW,eAA7CF,EACR,MAAO,CACL,CACEuV,MAAOrF,EAAO9W,WAAWzC,OACzBN,MAAO2J,EAAE,gBACTpJ,YAAaoJ,EAAE,uBAEjB,CACEuV,MAAOrF,EAAO9W,WAAWvC,OACzBR,MAAO2J,EAAE,gBACTpJ,YAAaoJ,EAAE,uBAEjB,CACEuV,MAAOrF,EAAO9W,WAAWtC,OACzBT,MAAO2J,EAAE,gBACTpJ,YAAaoJ,EAAE,uBAEjB,CACEuV,MAAOrF,EAAO9W,WAAWrC,OACzBV,MAAO2J,EAAE,gBACTpJ,YAAaoJ,EAAE,uBAEjB,CACEuV,MAAOrF,EAAO9W,WAAWpC,OACzBX,MAAO2J,EAAE,gBACTpJ,YAAaoJ,EAAE,uBAEjB,CACEuV,MAAOrF,EAAO9W,WAAWnC,OACzBZ,MAAO2J,EAAE,kBAMEyW,GACf,EAA4CvV,IAAM4K,SAAwB,GAAE,YAArEoK,EAAc,KAAEQ,EAAiB,KAClCC,EAA6BzV,IAAM0V,aAAY,SAACC,GACpDH,EAAkBG,EAAKC,cAAc/O,OAAS,EAAI8O,EAAKC,cAAc,GAAGlD,MAAQ,QAC/E,IACH,OACE,gBAAC9R,GAAA,QAAI,CAACC,MAAOC,GAAOC,UAAU,UAC5B,eAACiL,GAAA,QAAQ,CACP/F,KAAMqP,EACNrJ,WAAY,gBAAGC,EAAI,EAAJA,KAAI,OAAO,eAAC,G,oWAAc,IAAKA,KAC9C2J,YAAU,EACVC,eAAa,EACbC,SAAS,EACTC,gCAAgC,EAChCC,uBAAwBR,EACxBS,kBAAmB,CAAEC,iCAAkC,MAEzD,eAAC,GAAS,CAACpB,WAAYO,EAAOzO,OAAQmO,eAAgBA,QCnD7CoB,GAJI,SAAC9W,GAClB,OAAO,eAAC,GAAkB,KCLtB+W,GAAgC,YAAhB5T,WAASC,GAAmB,kBAAoB,mBAChE4T,GAAgC,YAAhB7T,WAASC,GAAmB,kBAAoB,mB,iBCehE5B,GAASY,WAAWC,OAAO,CAC/BZ,UAAW,CACT6T,cAAe,MACfjL,WAAY,UAEd4M,YAAa,CACXxU,MAAO,GACP4P,iBAAkB,GAEpBxS,MAAO,CACLkD,MAAO,4BAIImU,GAzBO,SAAClX,GACrB,IAAQmX,EAAqCnX,EAArCmX,cAAeC,EAAsBpX,EAAtBoX,kBACjBC,EAAWD,EAAoBD,EACrC,OACE,gBAAC7V,GAAA,QAAI,CAACC,MAAOC,GAAOC,UAAU,UAC5B,eAAC6V,GAAA,QAAW,CAACD,SAAUA,EAAU9V,MAAOC,GAAOyV,cAC/C,eAACpV,GAAA,QAAI,CAACC,QAAQ,aAAaP,MAAOC,GAAO3B,MAAM,SAAEsX,EAAgBC,QCOjEG,GAAoBtF,YAAaC,MAAM,CAC3CtH,KAAMqH,YACH4B,I/DlBgC,G+DmBhCC,I/DlBgC,K+DmBhC3B,SAAS,cAwDR3Q,GAASY,WAAWC,OAAO,CAC/BZ,UAAW,CACTa,SAAU,WACVC,OAAQ,EACRC,KAAM,EACNC,MAAO,OACPsP,kBAAmB,GAErByF,UAAW,CACT/U,MAAO,OACPgV,UAAW,KAEbC,kBAAmB,CACjBpC,cAAe,MACfhL,eAAgB,gBAChBD,WAAY,SACZ0H,kBAAmB,KAIR4F,GAzES,WACtB,IAAQnY,EAAMC,yBAAe,UAAW,CAAEC,UAAW,iBAA7CF,EACF2P,EAAaC,2BACbwI,EFzBO,WACb,MAAgDlX,IAAM4K,UAAS,GAAM,YAA9DsM,EAAiB,KAAEC,EAAkB,KAS5C,OARAnX,IAAMU,WAAU,WACd,IAAM0W,EAAehJ,WAASiJ,YAAYhB,IAAe,kBAAMc,GAAmB,MAC5EG,EAAelJ,WAASiJ,YAAYf,IAAe,kBAAMa,GAAmB,MAClF,OAAO,WACLC,EAAaG,SACbD,EAAaC,YAEd,IACIL,EEemBM,GAC1B,OACE,eAAC,UAAM,CACLlF,cAAe,CAAEpI,KAAM,IACvBqI,iBAAkBsE,GAClBrE,SAAU,SAACC,EAAQ3b,GACjB,IAAQoT,EAASuI,EAATvI,KACAtD,EAAiB3H,GAAjB2H,aAIR,OAHAkC,KAAOlC,GACPwH,WAASzP,UAEFqE,GADS4I,GAAcjK,OAAO,CAAEuI,OAAMyB,iBAAkB/E,EAAasE,KAC5C,CAC9B/H,eAAgB,KAChBD,UAAW,WACTpM,EAAQ2gB,YACRhJ,EAAWG,SAAS,yBAEtBvL,cAAc,KAEhB,SAED,gBAAGwP,EAAY,EAAZA,aAAcD,EAAY,EAAZA,aAAca,EAAU,EAAVA,WAAYV,EAAY,EAAZA,aAAcN,EAAM,EAANA,OAAQhY,EAAM,EAANA,OAAQqY,EAAO,EAAPA,QAAO,OAC/E,gBAAClS,GAAA,QAAI,CAACC,MAAOC,GAAOC,UAAU,UAC5B,eAAC8M,GAAA,QAAS,CACRhN,MAAOC,GAAOgW,UACdhJ,KAAK,WACLC,YAAajP,EAAE,SACf4Y,WAAS,EACTxJ,U/DrDyB,I+DsDzBrS,MAAO4W,EAAOvI,KACdiE,aAAcyE,EAAa,QAC3Bc,OAAQD,EAAW,QACnB9c,MAAOqc,QAAQvY,EAAOyP,OAAS4I,EAAQ5I,QAEvCgN,IAAsB1U,IAAYiQ,EAAOvI,KAAKrD,OAAS,IACvD,gBAACjG,GAAA,QAAI,CAACC,MAAOC,GAAOkW,kBAAkB,UACpC,eAAC,GAAa,CAACP,c/D7DQ,I+D6D8BC,kBAAmBjE,EAAOvI,KAAKrD,SACpF,eAACxF,GAAA,QAAU,CACTC,KAAK,OACLoK,SAAUqH,EACV3T,QAAS,kBAAMyT,iBCnDzB8E,GAAe9Y,qBAAS,SAACS,GAC7B,IAAQmP,EAAenP,EAAfmP,WACA3P,EAAMC,yBAAe,UAAW,CAAEC,UAAW,iBAA7CF,EACFkT,EAAeC,qBACrB,OACE,eAACC,GAAA,QAAY,CAACrR,MAAO,CAAE8B,KAAM,GAAI,SAC/B,eAACwP,GAAA,QAAoB,CACnBtR,MAAO,CAAE8B,KAAM,GACfyP,SAA0B,QAAhB3P,WAASC,GAAe,eAAY7F,EAC9CwV,uBAAwBL,EAAa,SAErC,gBAACpR,GAAA,QAAI,CAACC,MAAO,CAAE8B,KAAM,GAAI,UACvB,eAAC,GAAa,CACZ9B,MAAOC,GAAO8W,aACd3R,KAAMhH,GAAM7G,aAAa8L,OACzBwG,SAAU,kBAAM+D,EAAWG,SAAS,yBACpCjE,kBAAmB,kBAAM8D,EAAWG,SAAS,yBAC7CiJ,oBACE,eAAC1W,GAAA,QAAI,CAACC,QAAQ,cAAcP,MAAOC,GAAOtJ,eAAe,SACtDsH,EAAE,sBAIT,eAAC,GAAe,cAOpBgC,GAASY,WAAWC,OAAO,CAC/BiW,aAAc,CACZvG,kBAAmB,IAErB7Z,eAAgB,CACd4K,UAAW,SACXuK,eAAgB,MAILgL,MCVT7W,GAASY,WAAWC,OAAO,CAC/BZ,UAAW,CACT4B,KAAM,EACNgH,WAAY,SACZC,eAAgB,SAChB5H,gBAAiB,kBAEnB7M,MAAO,CACLmV,WAAY,OACZqC,eAAgB,EAChBtK,MAAO,cAETyV,iBAAkB,CAChB/K,UAAW,IAEb+E,OAAQ,CACNnF,eAAgB,GAChB3K,gBAAiB,cAEnB+V,WAAY,CACV1V,MAAO,oBAII2V,GAjEc,SAAC1Y,GAC5B,IAAQmP,EAAenP,EAAfmP,WACA3P,EAAMC,yBAAe,UAAW,CAAEC,UAAW,yBAA7CF,EACR,OACE,gBAACoT,GAAA,QAAY,CAACrR,MAAOC,GAAOC,UAAU,UACpC,eAACM,GAAA,QAAU,CACTC,KAAK,uBACLmT,UAAU,aACVlT,KAAM,MAER,eAACJ,GAAA,QAAI,CAACC,QAAQ,gBAAgBP,MAAOC,GAAO3L,MAAM,SAAE2J,EAAE,WACtD,gBAAC8B,GAAA,QAAI,CAACC,MAAOC,GAAOgX,iBAAiB,UACnC,eAACzJ,GAAA,QAAM,CACLxN,MAAOC,GAAOgR,OACdhE,KAAK,YACL1O,QAAS,kBAAMqP,EAAWG,SAAS,iBAAgB,SAEnD,eAACzN,GAAA,QAAI,CACHC,QAAQ,aACRP,MAAO,CAACC,GAAOiX,WAAY,CAAEzN,WAAY,SAAU,SAElDxL,EAAE,wBAGP,eAACuP,GAAA,QAAM,CACLxN,MAAOC,GAAOgR,OACdhE,KAAK,YACL1O,QAAS,kBAAMqP,EAAWG,SAAS,SAAQ,SAE3C,eAACzN,GAAA,QAAI,CACHC,QAAQ,cACRP,MAAOC,GAAOiX,WAAW,SAExBjZ,EAAE,uBCxCT+G,GAAQC,eAAG,iTAkDF,SAAemS,GAAS,GAAD,gCAGrC,6BAHc,UAAwBrQ,GAErC,aADkB5B,EAAaH,MAAwB,CAAEA,SAAO+B,eACrD3B,KAAKC,OAAOgS,UACxB,sBCvDgC,IAUlB,OARO,0CACbA,MAAQ,IAAInU,GAAUkU,GAAU,CAAEhT,eAAgBoB,QAAQ1P,QAIhE,OAJwE,mDAEzE,UAAqBwZ,SACb5R,KAAK2Z,MAAM/T,oBAAoB,CAAEgM,eACxC,mDAJwE,MAIxE,EALmB,ICahBgI,GAActZ,qBAAS,SAACS,GAC5B,IAAQ6Q,EAAY7Q,EAAM8Y,MAAMC,OAAxBlI,QACRmI,0BACEtY,IAAM0V,aAAY,WAEhB1S,GADgB/D,GAAMoI,QAAQ8I,GACL,CAAEhN,eAAgB,KAAME,cAAc,MAC9D,CAAC8M,KAEN,IAAQrR,EAAMC,yBAAe,UAAW,CAAEC,UAAW,gBAA7CF,EACFoZ,EAAQjZ,GAAMiZ,MAAMhU,OAE1B,OACE,eAACgO,GAAA,QAAY,CAACrR,MAAOC,GAAOC,UAAU,SACpC,eAAC,GAAa,CACZkF,KAAW,MAALiS,OAAK,EAALA,EAAO1hB,UACbiU,iBAAe,EACf5J,MAAOC,GAAOzH,cACdwe,yBACwBhb,KAAhB,MAALqb,OAAK,EAALA,EAAO3M,WACN,eAACpK,GAAA,QAAI,CAACC,QAAQ,cAAcP,MAAOC,GAAOyX,WAAW,SAC/CzZ,EAAE,kBAAiB,IAAIwM,mBAAO4M,EAAM3M,UAAWzM,EAAE,iBAErD,YAORgC,GAASY,WAAWC,OAAO,CAC/BZ,UAAW,CACT4B,KAAM,GAERtJ,cAAe,CACbgY,kBAAmB,IAErBkH,WAAY,CACVnW,UAAW,SACXuK,eAAgB,MAILwL,MCvBTrX,GAASY,WAAWC,OAAO,CAC/B6W,KAAM,CACJ5L,aAAc,MAIH6L,GA1BM,SAACnZ,GACpB,IAAQ4Y,EAAU5Y,EAAV4Y,MACAhN,EAAyBgN,EAAzBhN,GAAI/V,EAAqB+iB,EAArB/iB,MAAOoW,EAAc2M,EAAd3M,UACXzM,EAAMC,yBAAe,UAAW,CAAEC,UAAW,YAA7CF,EACF2P,EAAaC,2BACnB,OACE,eAACiB,GAAA,QAAI,CACH9O,MAAOC,GAAO0X,KACdpZ,QAAS,kBAAMqP,EAAWG,SAAS,cAAe,CAAEuB,QAASjF,KAAM,SAEnE,eAACyE,GAAA,QAAKC,MAAK,CACTza,MAAOA,EACP0a,aAAa,YACbza,SAAUkW,mBAAOC,EAAWzM,EAAE,oBAC9B4Z,gBAAgB,kBCblB5X,GAASY,WAAWC,OAAO,CAC/BZ,UAAW,CACT4B,KAAM,EACNgH,WAAY,SACZ4F,WAAY,IAEd8E,MAAO,CACLtS,MAAO,IACPjC,OAAQ,IACRmP,WAAY,aAID0J,GAvBM,WACnB,IAAQ7Z,EAAMC,yBAAe,UAAW,CAAEC,UAAW,YAA7CF,EACR,OACE,gBAAC8B,GAAA,QAAI,CAACC,MAAOC,GAAOC,UAAU,UAC5B,eAACyT,GAAA,QAAK,CAACzF,OAAQC,EAAOlX,KAAK6D,MAAOkF,MAAOC,GAAOuT,QAChD,eAAClT,GAAA,QAAI,CAACC,QAAQ,aAAY,SAAEtC,EAAE,sBCK9B8Z,GAAU/Z,qBAAS,SAACS,GACxB,IAAQR,EAAMC,yBAAe,UAAW,CAAEC,UAAW,YAA7CF,EACR,OACE,gBAAC8B,GAAA,QAAI,CAACC,MAAOC,GAAOC,UAAU,UAC5B,eAACiL,GAAA,QAAQ,CACP/F,KAAMhH,GAAM1I,QAAQ2N,OACpB+H,WAAY,gBAAGC,EAAI,EAAJA,KAAI,OAAO,eAAC,GAAY,CAACgM,MAAOhM,KAC/CC,aAAc,SAAAD,GAAI,OAAIA,EAAKhB,GAAGkB,YAC9B2E,eACE,eAACC,GAAA,QAAc,CACbC,WAAYhS,GAAM1I,QAAQsO,QAC1BqM,UAAW,WAETlO,GADgB/D,GAAMoI,UACG,CAAElE,eAAgB,KAAME,cAAc,OAIrEwU,oBACE,eAAC1W,GAAA,QAAI,CACHC,QAAQ,aACRP,MAAOC,GAAO+X,SAAS,SAEtB/Z,EAAE,WAAY,CAAEga,eAAgB7Z,GAAMiI,iBAAiB7C,eAG5DgI,mBAAoB,eAAC,GAAY,MAEnC,eAAC,GAAgB,UAKjBvL,GAASY,WAAWC,OAAO,CAC/BZ,UAAW,CACT4B,KAAM,EACN0O,kBAAmB,IAErBwH,SAAU,CACRlM,eAAgB,MAILiM,MCrBTG,GAAQC,qBAuCCC,GArCGpa,qBAAS,WACzB,IAAQC,EAAMC,yBAAe,SAAU,CAAEC,UAAW,QAA5CF,EACR,OAAIoa,GAASrU,QACJ,eAAC,GAAO,IAEf,eAACsU,GAAA,QAAmB,UAClB,gBAACJ,GAAME,UAAS,CACdG,iBAAkBpQ,GAAgBC,oBAAsB,OAAS,aACjEoQ,cAAe,CACbC,YAAa,CACXtX,gBAAiB,WAEnBuX,gBAAiBza,EAAE,aACnB0a,iBAAkB,CAChBlP,WAAY,OACZH,SAAU,GACV9H,MAAO,WAEToX,aAAc,CACZzX,gBAAiB,YAEnB,UAEF,eAAC+W,GAAMW,OAAM,CAACxc,KAAK,OAAOyc,UAAW7I,GAAM8I,QAAS,CAAEC,aAAa,GAASC,UAAW,CAAEC,MAAO5S,MAChG,eAAC4R,GAAMW,OAAM,CAACxc,KAAK,QAAQyc,UAAW5H,GAAO6H,QAAS,CAAEzkB,MAAO2J,EAAE,oBACjE,eAACia,GAAMW,OAAM,CAACxc,KAAK,WAAWyc,UAAWhS,GAAUiS,QAAS,CAAEzkB,MAAO2J,EAAE,uBACvE,eAACia,GAAMW,OAAM,CAACxc,KAAK,iBAAiByc,UAAWxR,GAAgByR,QAAS,CAAEzkB,MAAO2J,EAAE,6BACnF,eAACia,GAAMW,OAAM,CAACxc,KAAK,aAAayc,UAAWvD,GAAYwD,QAAS,CAAEC,aAAa,KAC/E,eAACd,GAAMW,OAAM,CAACxc,KAAK,eAAeyc,UAAWhC,GAAciC,QAAS,CAAEzkB,MAAO2J,EAAE,yBAA2Bgb,UAAW,CAAEC,MAAOzS,MAC9H,eAACyR,GAAMW,OAAM,CAACxc,KAAK,uBAAuByc,UAAW3B,GAAsB4B,QAAS,CAAEC,aAAa,KACnG,eAACd,GAAMW,OAAM,CAACxc,KAAK,cAAcyc,UAAWxB,GAAayB,QAAS,CAAEzkB,MAAO2J,EAAE,0BAC7E,eAACia,GAAMW,OAAM,CAACxc,KAAK,UAAUyc,UAAWf,GAASgB,QAAS,CAAEzkB,MAAO2J,EAAE,oBAAsBgb,UAAW,CAAEC,MAAOvS,cC7CvHwS,mBAdY,WACV,OACE,eAACC,EAAA,eAAc,CAACC,OAAQA,EAAO,SAC7B,eAAC,UAAa,CAACC,MAAOC,eAAa,SACjC,gBAACC,GAAY,WACX,eAAC,GAAS,IACV,eAAC,GAAQ,IACT,eAACC,EAAA,UAAS,CAACzZ,MAAM,qB","file":"static/js/app.58927be5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/slide1.363002c1.png\";","module.exports = __webpack_public_path__ + \"static/media/slide2.a9c23c2f.png\";","module.exports = __webpack_public_path__ + \"static/media/slide3.f00edb54.png\";","module.exports = __webpack_public_path__ + \"static/media/slide4.3ba82faf.png\";","module.exports = __webpack_public_path__ + \"static/media/slide5.56af1504.png\";","module.exports = __webpack_public_path__ + \"static/media/slide6.de1ae450.png\";","module.exports = __webpack_public_path__ + \"static/media/treeBackground.3131d4f0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/void.3f06e14f.png\";","export type LoginScreenDefinition = {\r\n  form: {\r\n    headlineTitle: string,\r\n    headlineDescription: string,\r\n    email: string,\r\n    password: string,\r\n    submit: string,\r\n    forgotPassword: string,\r\n    register: string,\r\n  },\r\n};\r\n\r\nconst fr: LoginScreenDefinition = {\r\n  form: {\r\n    headlineTitle: \"Rebonjour!\",\r\n    headlineDescription: \"Connectez-vous à votre compte\",\r\n    email: \"Email\",\r\n    password: \"Mot de passe\",\r\n    submit: \"Se connecter\",\r\n    forgotPassword: \"Mot de passe oublié\",\r\n    register: \"Je n'ai pas de compte\",\r\n  },\r\n};\r\n\r\nconst en: LoginScreenDefinition = {\r\n  form: {\r\n    headlineTitle: \"Welcome back!\",\r\n    headlineDescription: \"Sign in to your account\",\r\n    email: \"Email\",\r\n    password: \"Password\",\r\n    submit: \"Sign in\",\r\n    forgotPassword: \"Forgot password\",\r\n    register: \"I don't have an account\",\r\n  },\r\n};\r\n\r\nexport default {\r\n  fr,\r\n  en,\r\n};\r\n","export type RegisterScreenDefinition = {\r\n  form: {\r\n    headlineTitle: string,\r\n    headlineDescription: string,\r\n    username: string,\r\n    usernameHelper: string,\r\n    email: string,\r\n    password: string,\r\n    submit: string,\r\n    registerSuccess: string,\r\n  },\r\n};\r\n\r\nconst fr: RegisterScreenDefinition = {\r\n  form: {\r\n    headlineTitle: \"Bienvenue sur Taale\",\r\n    headlineDescription: \"Créer votre compte\",\r\n    username: \"Nom d'utilisateur\",\r\n    usernameHelper: \"[a-z], [0-9], '_' (ex: John_Doe07)\",\r\n    email: \"Email\",\r\n    password: \"Mot de passe\",\r\n    submit: \"Créer mon compte\",\r\n    registerSuccess: \"Compte créé avec succès\",\r\n  },\r\n};\r\n\r\nconst en: RegisterScreenDefinition = {\r\n  form: {\r\n    headlineTitle: \"Welcome to Taale!\",\r\n    headlineDescription: \"Create an account\",\r\n    username: \"Username\",\r\n    usernameHelper: \"[a-z], [0-9], '_' (ex: John_Doe07)\",\r\n    email: \"Email\",\r\n    password: \"Password\",\r\n    submit: \"Sign Up\",\r\n    registerSuccess: \"Account successfully created\",\r\n  },\r\n};\r\n\r\nexport default {\r\n  fr,\r\n  en,\r\n};\r\n","export type ForgotPasswordDefinition = {\r\n  forgotPasswordForm: {\r\n    title: string,\r\n    subtitle: string,\r\n    emailLabel: string,\r\n    submit: string,\r\n  },\r\n  resetPasswordForm: {\r\n    title: string,\r\n    subtitle: string,\r\n    newPasswordLabel: string,\r\n    validationCodeLabel: string,\r\n    submit: string,\r\n  },\r\n};\r\n\r\nconst fr: ForgotPasswordDefinition = {\r\n  forgotPasswordForm: {\r\n    title: \"Réinitialisez votre mot de passe\",\r\n    subtitle: \"Vous allez recevoir un code de validation par email.\",\r\n    emailLabel: \"Email\",\r\n    submit: \"Envoyer le code\",\r\n  },\r\n  resetPasswordForm: {\r\n    title: \"Réinitialisez votre mot de passe\",\r\n    subtitle: \"Veuillez renseigner un nouveau mot de passe.\",\r\n    newPasswordLabel: \"Nouveau mot de passe\",\r\n    validationCodeLabel: \"Code\",\r\n    submit: \"Sauvegarder\",\r\n  },\r\n};\r\n\r\nconst en: ForgotPasswordDefinition = {\r\n  forgotPasswordForm: {\r\n    title: \"Reset your password\",\r\n    subtitle: \"You'll receive a validation code by email.\",\r\n    emailLabel: \"Email\",\r\n    submit: \"Send verification code\",\r\n  },\r\n  resetPasswordForm: {\r\n    title: \"Reset your password\",\r\n    subtitle: \"Set your new password.\",\r\n    newPasswordLabel: \"New password\",\r\n    validationCodeLabel: \"Code\",\r\n    submit: \"Save\",\r\n  },\r\n};\r\n\r\nexport default {\r\n  fr,\r\n  en,\r\n};\r\n","interface SlideDefinition {\r\n  title: string,\r\n  description?: string,\r\n}\r\n\r\nexport type OnboardingScreenDefinition = {\r\n  slide1: SlideDefinition,\r\n  slide2: SlideDefinition,\r\n  slide3: SlideDefinition,\r\n  slide4: SlideDefinition,\r\n  slide5: SlideDefinition,\r\n  slide6: SlideDefinition,\r\n};\r\n\r\nconst fr: OnboardingScreenDefinition = {\r\n  slide1: {\r\n    title: \"Bienvenue sur Taale\",\r\n    description: \"Taale est une application d'écriture collaborative ou les utilisateurs participent à l'élaboration d'une immense fable comportant une infinité d'univers paralèlles.\",\r\n  },\r\n  slide2: {\r\n    title: \"L'arbre\",\r\n    description: `On peux representer la Fable comme un gigantesque arbre inversé. La base sera toujours la phrase \"Il était une fois, \" puis les utilisateurs construisent les branches au fil des paragraphes qu'ils écrivent.`,\r\n  },\r\n  slide3: {\r\n    title: \"Un cadre limité\",\r\n    description: \"Pour pimenter la chose, les utilisateurs sont placés aléatoirement sur une branche et ne peuvent voir que quelques paragraphes au dessus d'eux. Le but étant de continuer l'histoire tout en gardant son sens.\",\r\n  },\r\n  slide4: {\r\n    title: \"Deviens Taaler\",\r\n    description: \"À chaque fois tu écrit un nouveau paragraphe, tu débloque un univers des possibles. Tu te retrouvera certainement dans une des histoires publiées quotidiennement sur la page d'accueil.\",\r\n  },\r\n  slide5: {\r\n    title: \"Vote !\",\r\n    description: \"Si tu pense qu'une certaine phrase termine l'histoire, clique dessus pour voter la fin de la branche. Au contraire, si une phrase ne fait aucun sens ou comporte du contenu injurieux, tu peux la signaler.\",\r\n  },\r\n  slide6: {\r\n    title: \"À toi de jouer\",\r\n  },\r\n};\r\n\r\nconst en: OnboardingScreenDefinition = {\r\n  slide1: {\r\n    title: \"Welcome to Taale\",\r\n    description: \"Taale is a collaborative writing application where users participate in the development of a massive fable containing an infinite number of parallel universes.\",\r\n  },\r\n  slide2: {\r\n    title: \"The tree\",\r\n    description: `We can represent the Fable as a gigantic inverted tree. The base will always be the sentence 'Once upon a time, ' and then the users will build the branches as they write paragraphs.`,\r\n  },\r\n  slide3: {\r\n    title: \"Limited scope\",\r\n    description: \"To add some spice, users are randomly placed on a branch and can only see a few paragraphs above them. The goal is to continue the story while keeping its meaning intact.\",\r\n  },\r\n  slide4: {\r\n    title: \"Become a Taaler\",\r\n    description: \"Every time you write a new paragraph, you unlock a universe of possibilities. You may find yourself in one of the stories featured daily on the homepage.\",\r\n  },\r\n  slide5: {\r\n    title: \"Vote!\",\r\n    description: \"If you think that a certain sentence ends the story, click on it to vote for the end of the branch. On the contrary, if a phrase doesn't make any sense or contains offensive content, you can report it.\",\r\n  },\r\n  slide6: {\r\n    title: \"Your turn to play\",\r\n  },\r\n};\r\n\r\nexport default {\r\n  fr,\r\n  en,\r\n};\r\n","export type HomeScreenDefinition = {\r\n  hero: {\r\n    hello: string,\r\n    guest: string,\r\n  },\r\n  statistics: {\r\n    title: string,\r\n    stats: {\r\n      users: string,\r\n      trees: string,\r\n      stories: string,\r\n      sentences: string,\r\n    },\r\n    nullValue: string,\r\n  },\r\n  dailyStory: {\r\n    title: string,\r\n    subtitle: string,\r\n    error: string,\r\n  },\r\n  myLibrary: {\r\n    title: string,\r\n    subtitle: string,\r\n  },\r\n  settingsSheet: {\r\n    title: string,\r\n    actions: string,\r\n    about: string,\r\n    support: string,\r\n    logout: string,\r\n    logoutSuccess: string,\r\n    dangerZone: string,\r\n    deleteAccount: string,\r\n    accountDeletionAlert: {\r\n      title: string,\r\n      description: string,\r\n      cancel: string,\r\n      submit: string,\r\n    },\r\n    accountDeletionSuccess: string,\r\n  },\r\n};\r\n\r\nconst fr: HomeScreenDefinition = {\r\n  hero: {\r\n    hello: \"Bonjour,\",\r\n    guest: \"Invité\",\r\n  },\r\n  statistics: {\r\n    title: \"Taale en chiffres\",\r\n    stats: {\r\n      users: \"Utilisateurs\",\r\n      trees: \"Arbres (Langues supportées)\",\r\n      stories: \"Branches (Histoires crées)\",\r\n      sentences: \"Feuilles (Paragraphes écrits)\",\r\n    },\r\n    nullValue: \"N/A\",\r\n  },\r\n  dailyStory: {\r\n    title: \"L'histoire du jour\",\r\n    subtitle: \"Une nouvelle histoire tous les jours à minuit\",\r\n    error: \"Une erreur est survenue\",\r\n  },\r\n  myLibrary: {\r\n    title: \"Bibliothèque\",\r\n    subtitle: \"Retrouve toutes tes histoires\",\r\n  },\r\n  settingsSheet: {\r\n    title: \"Paramètres\",\r\n    actions: \"Actions\",\r\n    about: \"À propos\",\r\n    support: \"Support\",\r\n    logout: \"Se déconnecter\",\r\n    logoutSuccess: \"Déconnecté avec succès\",\r\n    dangerZone: \"Zone de danger\",\r\n    deleteAccount: \"Supprimer mon compte\",\r\n    accountDeletionAlert: {\r\n      title: \"Suppression de compte\",\r\n      description: \"Cette action est irréversible et entrainera la suppression de toutes vos données.\",\r\n      cancel: \"Retour\",\r\n      submit: \"Supprimer\",\r\n    },\r\n    accountDeletionSuccess: \"Compte supprimé avec succès\",\r\n  },\r\n};\r\n\r\nconst en: HomeScreenDefinition = {\r\n  hero: {\r\n    hello: \"Hello,\",\r\n    guest: \"Guest\",\r\n  },\r\n  statistics: {\r\n    title: \"Statistics\",\r\n    stats: {\r\n      users: \"Users\",\r\n      trees: \"Trees (Supported languages)\",\r\n      stories: \"Branches (Stories)\",\r\n      sentences: \"Leafs (Written paragraphs)\",\r\n    },\r\n    nullValue: \"N/A\",\r\n  },\r\n  dailyStory: {\r\n    title: \"Today's story\",\r\n    subtitle: \"A new story every day at midnight\",\r\n    error: \"Something went wrong\",\r\n  },\r\n  myLibrary: {\r\n    title: \"Library\",\r\n    subtitle: \"Find all your stories\",\r\n  },\r\n  settingsSheet: {\r\n    title: \"Settings\",\r\n    actions: \"Actions\",\r\n    about: \"About\",\r\n    support: \"Support\",\r\n    logout: \"Logout\",\r\n    logoutSuccess: \"Successfully logged out\",\r\n    dangerZone: \"Danger zone\",\r\n    deleteAccount: \"Delete my account\",\r\n    accountDeletionAlert: {\r\n      title: \"Account deletion\",\r\n      description: \"This action is irreversible and will delete all your datas from the application.\",\r\n      cancel: \"Cancel\",\r\n      submit: \"Delete\",\r\n    },\r\n    accountDeletionSuccess: \"Account successfully deleted\",\r\n  },\r\n};\r\n\r\nexport default {\r\n  fr,\r\n  en,\r\n};\r\n","export type PartialStoryScreenDefinition = {\r\n  listInfoHeader: string,\r\n  write: string,\r\n}\r\n\r\nconst fr: PartialStoryScreenDefinition = {\r\n  listInfoHeader: \"Vous avez été placé aléatoirement sur une branche\",\r\n  write: \"Écrire\",\r\n};\r\n\r\nconst en: PartialStoryScreenDefinition = {\r\n  listInfoHeader: \"You've been randomly placed on a branch\",\r\n  write: \"Write\",\r\n};\r\n\r\nexport default {\r\n  fr,\r\n  en,\r\n};\r\n","export type ParticipationSuccessScreenDefinition = {\r\n  title: string,\r\n  partialStoryLink: string,\r\n  homeLink: string,\r\n};\r\n\r\nconst fr: ParticipationSuccessScreenDefinition = {\r\n  title: \"Enregistré avec succès\",\r\n  partialStoryLink: \"C'est reparti\",\r\n  homeLink: \"Accueil\",\r\n};\r\n\r\nconst en: ParticipationSuccessScreenDefinition = {\r\n  title: \"Successfully saved\",\r\n  partialStoryLink: \"Let's do it again\",\r\n  homeLink: \"Home\",\r\n};\r\n\r\nexport default {\r\n  fr,\r\n  en,\r\n};\r\n","export type LibraryDefinition = {\r\n  pageInfo: string,\r\n  emptyLibrary: string,\r\n  misc: {\r\n    dateFormat: string,\r\n  },\r\n};\r\n\r\nconst fr: LibraryDefinition = {\r\n  pageInfo: \"Vous trouverez ici toutes les histoires auxquelles vous avez participé.\\nVous comptabilisez {{sentencesCount}} participation(s).\",\r\n  emptyLibrary: \"Wow, tellement vide\",\r\n  misc: {\r\n    dateFormat: \"dd/MM/yyyy HH:mm\",\r\n  },\r\n};\r\n\r\nconst en: LibraryDefinition = {\r\n  pageInfo: \"You'll find here every story you've participated in.\\nYou've participated {{sentencesCount}} time(s).\",\r\n  emptyLibrary: \"Wow, such empty\",\r\n  misc: {\r\n    dateFormat: \"dd/MM/yyyy hh:mm aaa\",\r\n  },\r\n};\r\n\r\nexport default {\r\n  fr,\r\n  en,\r\n};\r\n","export type StoryViewerDefinition = {\r\n  completedTitle: string,\r\n  dateFormat: string,\r\n};\r\n\r\nconst fr: StoryViewerDefinition = {\r\n  completedTitle: \"Complétée le\",\r\n  dateFormat: \"dd/MM/yy 'à' HH:mm\",\r\n};\r\n\r\nconst en: StoryViewerDefinition = {\r\n  completedTitle: \"Completed the\",\r\n  dateFormat: \"dd/MM/yy 'at' hh:mm aaa\",\r\n};\r\n\r\nexport default {\r\n  fr,\r\n  en,\r\n};\r\n","import login, { type LoginScreenDefinition } from './login';\r\nimport register, { type RegisterScreenDefinition } from './register';\r\nimport forgotPassword, { type ForgotPasswordDefinition } from './forgotPassword';\r\nimport onboarding, { type OnboardingScreenDefinition } from './onboarding';\r\nimport home, { type HomeScreenDefinition } from './home';\r\nimport partialStory, { type PartialStoryScreenDefinition } from './partialStory';\r\nimport participationSuccess, { type ParticipationSuccessScreenDefinition } from './participationSuccess';\r\nimport library, { type LibraryDefinition } from './library';\r\nimport storyViewer, { type StoryViewerDefinition } from './storyViewer';\r\n\r\nexport type ScreensDefinition = {\r\n  login: LoginScreenDefinition,\r\n  register: RegisterScreenDefinition,\r\n  onboarding: OnboardingScreenDefinition,\r\n  home: HomeScreenDefinition,\r\n  partialStory: PartialStoryScreenDefinition,\r\n  participationSuccess: ParticipationSuccessScreenDefinition,\r\n  library: LibraryDefinition,\r\n  storyViewer: StoryViewerDefinition,\r\n  forgotPassword: ForgotPasswordDefinition,\r\n}\r\n\r\nconst fr: ScreensDefinition = {\r\n  login: login.fr,\r\n  register: register.fr,\r\n  onboarding: onboarding.fr,\r\n  home: home.fr,\r\n  partialStory: partialStory.fr,\r\n  participationSuccess: participationSuccess.fr,\r\n  library: library.fr,\r\n  storyViewer: storyViewer.fr,\r\n  forgotPassword: forgotPassword.fr,\r\n};\r\n\r\nconst en: ScreensDefinition = {\r\n  login: login.en,\r\n  register: register.en,\r\n  onboarding: onboarding.en,\r\n  home: home.en,\r\n  partialStory: partialStory.en,\r\n  participationSuccess: participationSuccess.en,\r\n  library: library.en,\r\n  storyViewer: storyViewer.en,\r\n  forgotPassword: forgotPassword.en,\r\n};\r\n\r\nexport default {\r\n  fr,\r\n  en,\r\n};\r\n","export type SnackbarDefinition = {\r\n  close: string,\r\n};\r\n\r\nconst fr: SnackbarDefinition = {\r\n  close: 'Fermer',\r\n};\r\n\r\nconst en: SnackbarDefinition = {\r\n  close: 'Close',\r\n};\r\n\r\nexport default {\r\n  fr,\r\n  en\r\n};\r\n","export type AppDefinition = {\r\n  backTitle: string,\r\n  screens: {\r\n    login: string,\r\n    register: string,\r\n    forgotPassword: string,\r\n    partialStory: string,\r\n    storyViewer: string,\r\n    library: string,\r\n  },\r\n};\r\n\r\nconst fr: AppDefinition = {\r\n  backTitle: \"Retour\",\r\n  screens: {\r\n    login: \"Se connecter\",\r\n    register: \"Créer un compte\",\r\n    forgotPassword: \"Mot de passe oublié\",\r\n    partialStory: \"Participer\",\r\n    storyViewer: \"Lecteur\",\r\n    library: \"Bibliothèque\",\r\n  },\r\n};\r\n\r\nconst en: AppDefinition = {\r\n  backTitle: \"Back\",\r\n  screens: {\r\n    login: \"Login\",\r\n    register: \"Register\",\r\n    forgotPassword: \"Forgot password\",\r\n    partialStory: \"Participate\",\r\n    storyViewer: \"Reader\",\r\n    library: \"Library\",\r\n  },\r\n};\r\n\r\nexport default {\r\n  fr,\r\n  en\r\n};\r\n","export type SentencesListDefinition = {\r\n  report: string,\r\n  reportSuccessfull: string,\r\n  markCompleted: string,\r\n  markCompletedSuccessfull: string,\r\n  deletedUser: string,\r\n  misc: {\r\n    dateFormat: string,\r\n  },\r\n};\r\n\r\nconst fr: SentencesListDefinition = {\r\n  report: 'Signaler',\r\n  reportSuccessfull: 'Signalé avec succès',\r\n  markCompleted: 'Voter pour terminer',\r\n  markCompletedSuccessfull: 'Vote pris en compte',\r\n  deletedUser: \"Inconnu\",\r\n  misc: {\r\n    dateFormat: 'dd/MM/yy HH:mm',\r\n  },\r\n};\r\n\r\nconst en: SentencesListDefinition = {\r\n  report: 'Report',\r\n  reportSuccessfull: 'Successfully reported',\r\n  markCompleted: 'Mark completed',\r\n  markCompletedSuccessfull: 'Vote registered',\r\n  deletedUser: \"Unknown\",\r\n  misc: {\r\n    dateFormat: 'dd/MM/yy hh:mm aaa',\r\n  },\r\n};\r\n\r\nexport default {\r\n  fr,\r\n  en\r\n};\r\n","export type CodeValidationModalDefinition = {\r\n  title: string,\r\n  subTitle: string,\r\n  resendCode: string,\r\n};\r\n\r\nconst fr: CodeValidationModalDefinition = {\r\n  title: \"Rendez-vous sur votre boite mail\",\r\n  subTitle: \"Nous vous avons envoyé un code de vérification par email.\",\r\n  resendCode: \"Renvoyer le code\",\r\n};\r\n\r\nconst en: CodeValidationModalDefinition = {\r\n  title: \"Check your email\",\r\n  subTitle: \"We've sent you a verification code by email.\",\r\n  resendCode: \"Resend code\",\r\n};\r\n\r\nexport default {\r\n  fr,\r\n  en,\r\n};\r\n","export type ParticipationFabDefinition = {\r\n  participate: string,\r\n};\r\n\r\nconst fr: ParticipationFabDefinition = {\r\n  participate: \"Participer\",\r\n};\r\n\r\nconst en: ParticipationFabDefinition = {\r\n  participate: \"Participate\",\r\n};\r\n\r\nexport default {\r\n  fr,\r\n  en\r\n};\r\n","import snackbar, { SnackbarDefinition } from './snackbar';\r\nimport app, { AppDefinition } from './app';\r\nimport sentencesList, { SentencesListDefinition } from './sentencesList';\r\nimport codeValidationModal, { type CodeValidationModalDefinition } from './codeValidationModal';\r\nimport participationFab, { type ParticipationFabDefinition } from './participationFab';\r\n\r\nexport type CommonDefinition = {\r\n  snackbar: SnackbarDefinition,\r\n  app: AppDefinition,\r\n  sentencesList: SentencesListDefinition,\r\n  codeValidationModal: CodeValidationModalDefinition,\r\n  participationFab: ParticipationFabDefinition,\r\n};\r\n\r\nconst fr: CommonDefinition = {\r\n  snackbar: snackbar.fr,\r\n  app: app.fr,\r\n  sentencesList: sentencesList.fr,\r\n  codeValidationModal: codeValidationModal.fr,\r\n  participationFab: participationFab.fr,\r\n};\r\n\r\nconst en: CommonDefinition = {\r\n  snackbar: snackbar.en,\r\n  app: app.en,\r\n  sentencesList: sentencesList.en,\r\n  codeValidationModal: codeValidationModal.en,\r\n  participationFab: participationFab.en,\r\n};\r\n\r\nexport default {\r\n  fr,\r\n  en,\r\n};\r\n","export type ErrorsDefinition = {\r\n  _Default: string,\r\n  //Client errors\r\n  InvalidLoginOrPassword: string,\r\n  InvalidEmailFormat: string,\r\n  EmailTaken: string,\r\n  InvalidValidationCode: string,\r\n  InvalidUsernameLength: string,\r\n  InvalidUsernameChar: string,\r\n  UsernameTaken: string,\r\n  InvalidSentenceLength: string,\r\n  ResourceNotFound: string,\r\n  SpamDetected: string,\r\n  InsufficientPermission: string,\r\n  InvalidArgument: string,\r\n  SentenceAlreadyPartOfStory: string,\r\n  SentenceAlreadyReported: string,\r\n  SentenceAlreadyMarkedComplete: string,\r\n  // Server errors\r\n};\r\n\r\nconst fr: ErrorsDefinition = {\r\n  _Default: \"Une erreur est survenue\",\r\n  //Client errors\r\n  InvalidLoginOrPassword: \"Nom d'utilisateur ou mot de passe invalide\",\r\n  InvalidEmailFormat: \"Format d'email invalide\",\r\n  EmailTaken: \"Adresse email déjà utilisée\",\r\n  InvalidValidationCode: \"Code de vérification invalide\",\r\n  InvalidUsernameLength: \"Nom d'utilisateur trop court/long\",\r\n  InvalidUsernameChar: \"Le nom d'utilisateur contient un caractère invalide\",\r\n  UsernameTaken: \"Nom d'utilisateur déjà utilisé\",\r\n  InvalidSentenceLength: \"Taille de paragraphe invalide\",\r\n  ResourceNotFound: \"Resource non trouvée\",\r\n  SpamDetected: \"Spam détecté\",\r\n  InsufficientPermission: \"Permissions insufisantes\",\r\n  InvalidArgument: \"Argument invalide\",\r\n  SentenceAlreadyPartOfStory: \"Le paragraphe fait déjà parti d'une histoire\",\r\n  SentenceAlreadyReported: \"Paragraphe déjà signalé\",\r\n  SentenceAlreadyMarkedComplete: \"Paragraphe déjà voté comme point de terminaison\",\r\n  // Server errors\r\n} as const;\r\n\r\nconst en: ErrorsDefinition = {\r\n  _Default: \"An error has occured\",\r\n  //Client errors\r\n  InvalidLoginOrPassword: \"Invalid login or password\",\r\n  InvalidEmailFormat: \"Invalid email format\",\r\n  EmailTaken: \"Email already taken\",\r\n  InvalidValidationCode: \"Invalid verification code\",\r\n  InvalidUsernameLength: \"Username too short/long\",\r\n  InvalidUsernameChar: \"Username contains an invalid character\",\r\n  UsernameTaken: \"Username already taken\",\r\n  InvalidSentenceLength: \"Invalid sentence length\",\r\n  ResourceNotFound: \"Resource not found\",\r\n  SpamDetected: \"Spam detected\",\r\n  InsufficientPermission: \"Insufficient permission\",\r\n  InvalidArgument: \"Invalid argument\",\r\n  SentenceAlreadyPartOfStory: \"Sentence already part of a story\",\r\n  SentenceAlreadyReported: \"Sentence already reported\",\r\n  SentenceAlreadyMarkedComplete: \"Sentence already voted as termination point\",\r\n  // Server errors\r\n} as const;\r\n\r\nexport default {\r\n  fr,\r\n  en,\r\n};\r\n","import screens, { type ScreensDefinition } from './screens';\r\nimport common, { type CommonDefinition } from './common';\r\nimport errors, { type ErrorsDefinition } from './errors';\r\n\r\nexport type TranslationDefinition = {\r\n  common: CommonDefinition,\r\n  screens: ScreensDefinition,\r\n  errors: ErrorsDefinition,\r\n}\r\n\r\nconst fr: TranslationDefinition = {\r\n  common: common.fr,\r\n  screens: screens.fr,\r\n  errors: errors.fr,\r\n};\r\n\r\nconst en: TranslationDefinition = {\r\n  common: common.en,\r\n  screens: screens.en,\r\n  errors: errors.en,\r\n};\r\n\r\nexport default {\r\n  fr,\r\n  en,\r\n};\r\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport { getLocales } from 'expo-localization';\r\nimport translation, { type TranslationDefinition } from './translation';\r\n\r\nconst resources: Record<string, TranslationDefinition> = {\r\n  en: translation.en,\r\n  fr: translation.fr,\r\n};\r\n\r\ni18n\r\n  .use(initReactI18next)\r\n  .init({\r\n    resources,\r\n    lng: getLocales()[0]?.languageCode,\r\n    fallbackLng: 'en',\r\n    interpolation: {\r\n      escapeValue: false,\r\n    },\r\n    compatibilityJSON: 'v3',\r\n  });\r\n\r\nexport default i18n;\r\n","export const EmailVerificationCodeLength = 6;\r\nexport const UsernameMinLength = 2;\r\nexport const UsernameMaxLength = 24;\r\nexport const UsernameValidationRegex = new RegExp(`^\\\\w{${UsernameMinLength},${UsernameMaxLength}}$`);\r\nexport const PasswordMinLength = 4;\r\n\r\nexport const SentenceTextMinLength = 3;\r\nexport const SentenceTextMaxLength = 180;\r\n\r\nexport const ResetPasswordCodeLength = 8;\r\n","export default {\r\n  onboarding: {\r\n    slide1: require('../../../assets/onboarding/slide1.png'),\r\n    slide2: require('../../../assets/onboarding/slide2.png'),\r\n    slide3: require('../../../assets/onboarding/slide3.png'),\r\n    slide4: require('../../../assets/onboarding/slide4.png'),\r\n    slide5: require('../../../assets/onboarding/slide5.png'),\r\n    slide6: require('../../../assets/onboarding/slide6.png'),\r\n  },\r\n\r\n  home: {\r\n    treeBackground: require('../../../assets/home/treeBackground.jpg'),\r\n  },\r\n\r\n  misc: {\r\n    empty: require('../../../assets/mics/void.png'),\r\n  },\r\n};\r\n","import AsyncStorage from '@react-native-async-storage/async-storage'\r\nimport * as SecureStore from 'expo-secure-store';\r\n\r\nexport interface StorageOptions {\r\n  secure?: true,\r\n}\r\n\r\nasync function setItem(key: string, value: string, opts: StorageOptions = {}) {\r\n  const { secure } = opts;\r\n  if (secure && (await SecureStore.isAvailableAsync())) {\r\n    return SecureStore.setItemAsync(key, value);\r\n  }\r\n  return AsyncStorage.setItem(key, value);\r\n}\r\n\r\nasync function getItem(key: string, opts: StorageOptions = {}) {\r\n  const { secure } = opts;\r\n  if (secure && (await SecureStore.isAvailableAsync()))\r\n    return SecureStore.getItemAsync(key);\r\n  return AsyncStorage.getItem(key);\r\n}\r\n\r\nasync function deleteItem(key: string, opts: StorageOptions = {}) {\r\n  const { secure } = opts;\r\n  if (secure && (await SecureStore.isAvailableAsync()))\r\n    return SecureStore.deleteItemAsync(key);\r\n  return AsyncStorage.removeItem(key);\r\n}\r\n\r\nexport default {\r\n  setItem,\r\n  getItem,\r\n  deleteItem,\r\n};\r\n","import { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport { getLocales } from 'expo-localization';\r\nimport { AppName, AppVersion, AuthTokenKey } from 'core/constants';\r\nimport Storage from 'core/storage';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: 'https://taale-api.herokuapp.com/',\r\n});\r\n\r\nconst authLink = setContext(async (_, { headers }) => {\r\n  if (headers === undefined)\r\n    headers = {};\r\n  const token = await Storage.getItem(AuthTokenKey, { secure: true });\r\n  const languageCode = getLocales()[0]?.languageCode;\r\n  if (token !== null)\r\n    headers.authorization = `Bearer ${token}`;\r\n  if (languageCode)\r\n    headers['content-language'] = languageCode;\r\n  return { headers };\r\n});\r\n\r\nexport default new ApolloClient({\r\n  name: AppName,\r\n  version: AppVersion,\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache({\r\n    typePolicies: {\r\n      PublicQuery: {\r\n        merge(existing, incoming, { mergeObjects }) {\r\n          return mergeObjects(existing, incoming);\r\n        },\r\n      },\r\n      AuthenticatedQuery: {\r\n        merge(existing, incoming, { mergeObjects }) {\r\n          return mergeObjects(existing, incoming);\r\n        },\r\n      },\r\n      PublicMutation: {\r\n        merge(existing, incoming, { mergeObjects }) {\r\n          return mergeObjects(existing, incoming);\r\n        },\r\n      },\r\n      AuthenticatedMutation: {\r\n        merge(existing, incoming, { mergeObjects }) {\r\n          return mergeObjects(existing, incoming);\r\n        },\r\n      },\r\n    },\r\n  }),\r\n});\r\n","export const AppName = 'taale-app';\r\nexport const AppVersion = '1.0';\r\n\r\nexport const AuthTokenKey = 'auth_token';\r\n","import { observable, makeObservable, action } from 'mobx';\r\n\r\nexport type Duration = 'short' | 'medium' | 'long';\r\n\r\nexport interface DisplayOpts {\r\n  duration?: Duration,\r\n}\r\n\r\nconst DefaultDurationMs = 3000;\r\n\r\nconst DurationToMs = new Map<Duration, number>([\r\n  ['short', 1000],\r\n  ['long', 3000],\r\n  ['long', 5000],\r\n]);\r\n\r\nclass SnackbarStore {\r\n  visible: boolean = false;\r\n  msg: string = '';\r\n  duration: number = DefaultDurationMs;\r\n\r\n  constructor() {\r\n    makeObservable(this, {\r\n      visible: observable,\r\n      msg: observable,\r\n      duration: observable,\r\n      display: action,\r\n      dismiss: action,\r\n    });\r\n  }\r\n\r\n  display(msg: string, opts: DisplayOpts = {}) {\r\n    this.msg = msg;\r\n    const { duration } = opts;\r\n    if (duration)\r\n      this.duration = DurationToMs.get(duration) ?? DefaultDurationMs;\r\n    else if (this.duration != DefaultDurationMs)\r\n      this.duration = DefaultDurationMs;\r\n    this.visible = true;\r\n  }\r\n\r\n  dismiss() {\r\n    this.visible = false;\r\n  }\r\n}\r\n\r\nexport default new SnackbarStore();\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Snackbar as SnackbarPaper } from 'react-native-paper';\r\nimport { useTranslation } from 'react-i18next';\r\nimport store from 'store/common/snackbar';\r\n\r\nconst Snackbar = () => {\r\n  const { t } = useTranslation('common', { keyPrefix: 'snackbar' });\r\n  return (\r\n    <SnackbarPaper\r\n      visible={store.visible}\r\n      onDismiss={() => { store.dismiss(); }}\r\n      duration={store.duration}\r\n      action={{\r\n        label: t('close'),\r\n        onPress: () => { store.dismiss(); },\r\n      }}>\r\n      {store.msg}\r\n    </SnackbarPaper>\r\n  );\r\n};\r\n\r\nexport default observer(Snackbar);\r\n","import type { PropsWithChildren } from 'react';\r\nimport type { ScrollViewProps } from 'react-native';\r\n\r\nimport React from 'react';\r\nimport {\r\n  StyleSheet,\r\n  Animated,\r\n  useWindowDimensions,\r\n  View,\r\n  ScrollView,\r\n} from 'react-native';\r\nimport { Text, IconButton } from 'react-native-paper';\r\nimport { observer } from 'mobx-react';\r\n\r\nexport interface BottomSheetProps {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  animationDuration: number;\r\n  title: string;\r\n  scrollViewProps?: ScrollViewProps;\r\n}\r\n\r\nconst BottomSheet = observer((props: PropsWithChildren<BottomSheetProps>) => {\r\n  const { open, onClose, animationDuration, title, scrollViewProps, children } = props;\r\n  const { height } = useWindowDimensions();\r\n  const sheetHeight = height * 0.75;\r\n\r\n  const verticalOffset = React.useRef(new Animated.Value(sheetHeight)).current;\r\n  const openAnimation = React.useRef(\r\n    Animated.timing(verticalOffset, {\r\n      toValue: 0,\r\n      duration: animationDuration,\r\n      useNativeDriver: true,\r\n    })\r\n  ).current;\r\n  const closeAnimation = React.useRef(\r\n    Animated.timing(verticalOffset, {\r\n      toValue: sheetHeight,\r\n      duration: animationDuration,\r\n      useNativeDriver: true,\r\n    })\r\n  ).current;\r\n\r\n  React.useEffect(() => {\r\n    if (open)\r\n      openAnimation.start();\r\n    else\r\n      closeAnimation.start();\r\n  }, [open]);\r\n\r\n  return (\r\n    <Animated.View\r\n      style={[\r\n        styles.container,\r\n        {\r\n          height: sheetHeight,\r\n          transform: [{ translateY: verticalOffset }],\r\n        }\r\n      ]}\r\n    >\r\n      <View style={styles.header}>\r\n        <Text variant=\"titleLarge\" style={styles.title}>{title}</Text>\r\n        <IconButton icon=\"close\" size={32} style={styles.closeBtn} onPress={onClose} />\r\n      </View>\r\n      <ScrollView {...scrollViewProps}>\r\n        {children}\r\n      </ScrollView>\r\n    </Animated.View>\r\n  );\r\n});\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    position: 'absolute',\r\n    bottom: 0,\r\n    left: 0,\r\n    width: '100%',\r\n    backgroundColor: '#1a1a1d',\r\n    borderRadius: 16,\r\n    overflow: 'hidden',\r\n  },\r\n  header: {\r\n    width: '100%',\r\n    backgroundColor: '#110f15',\r\n    paddingVertical: 16,\r\n  },\r\n  title: {\r\n    textAlign: 'center',\r\n    color: 'whitesmoke',\r\n  },\r\n  closeBtn: {\r\n    position: 'absolute',\r\n    color: 'whitesmoke',\r\n    top: 2,\r\n    right: 2,\r\n  },\r\n});\r\n\r\nexport default BottomSheet;\r\n","import { Platform } from 'react-native';\r\n\r\nexport const isMobile = (Platform.OS === 'android' || Platform.OS === 'ios');\r\nexport const isWeb = (Platform.OS === 'web');\r\nexport const isDesktop = (Platform.OS === 'macos' || Platform.OS === 'windows');\r\n","import type { PropsWithChildren } from 'react';\r\n\r\nimport * as React from 'react';\r\nimport { StyleSheet, View } from 'react-native';\r\nimport { isMobile } from 'core/device';\r\n\r\nconst WebContainer = (props: PropsWithChildren<{}>) => {\r\n  const { children } = props;\r\n  if (isMobile)\r\n    return <React.Fragment>{children}</React.Fragment>;\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.appWrapper}>\r\n        {children}\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#455d7a',\r\n  },\r\n  appWrapper: {\r\n    width: 360,\r\n    height: 'auto',\r\n    aspectRatio: 6 / 13,\r\n    margin: 'auto',\r\n    overflow: 'hidden',\r\n    borderRadius: 32,\r\n  },\r\n});\r\n\r\nexport default WebContainer;\r\n","import { isApolloError } from '@apollo/client';\r\nimport i18n from 'lang';\r\nimport snackbarStore from 'store/common/snackbar';\r\n\r\nexport interface Opts<T> {\r\n  onSuccess?: (value: T) => void;\r\n  successMessage: string | null;\r\n  onError?: (error: unknown) => void;\r\n  errorMessage: string | true | null;\r\n};\r\n\r\nexport default function handleWithSnack<T>(promise: Promise<T>, opts: Opts<T>) {\r\n  const { onSuccess, successMessage, onError, errorMessage } = opts;\r\n  return promise.then((value) => {\r\n    if (onSuccess)\r\n      onSuccess(value);\r\n    if (successMessage)\r\n      snackbarStore.display(successMessage);\r\n    return value;\r\n  }).catch((error) => {\r\n    if (onError)\r\n      onError(error);\r\n    if (errorMessage) {\r\n      switch (typeof errorMessage) {\r\n        case 'string':\r\n          return snackbarStore.display(errorMessage, { duration: 'long' });\r\n        case 'boolean':\r\n          if (!isApolloError(error))\r\n            break;\r\n          const errorCode = error.graphQLErrors[0]?.extensions.code;\r\n          if (typeof errorCode !== 'string')\r\n            break;\r\n          return snackbarStore.display(i18n.t([errorCode, '_Default'], { ns: 'errors' }), { duration: 'long' });\r\n        default: break;\r\n      }\r\n      snackbarStore.display(i18n.t('_Default', { ns: 'errors' }), { duration: 'long' });\r\n    }\r\n  });\r\n}\r\n","import type { TrackOptions } from './ObservablePromiseStatus';\r\n\r\nimport ObservablePromiseStatus from './ObservablePromiseStatus';\r\n\r\nclass Fetchable<ArgsType extends any[], ResultType> extends ObservablePromiseStatus<ResultType> {\r\n  constructor(private fetch: (...args: ArgsType) => Promise<ResultType>, private opts: TrackOptions<ResultType>) {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Returns the last fulfilled result, reloads otherwise.\r\n   */\r\n  public ensureSuccess(...args: ArgsType) {\r\n    if (this.status === 'fulfilled')\r\n      return this.result as ResultType;\r\n    return this.ensureSuccessReload(...args);\r\n  }\r\n\r\n  /**\r\n   * Reloads and returns the result.\r\n   */\r\n  public ensureSuccessReload(...args: ArgsType) {\r\n    const promise = this.fetch(...args);\r\n    this.track(promise, this.opts);\r\n    return promise;\r\n  }\r\n}\r\n\r\nexport default Fetchable;\r\n","import { makeObservable, observable, action, computed } from 'mobx';\r\n\r\nexport type PromiseStatus = 'pending' | 'fulfilled' | 'rejected';\r\n\r\nexport interface TrackOptions<ResultType> {\r\n  thenUnhandled?: (result: ResultType) => void,\r\n  thenDropped?: (result: ResultType) => void,\r\n  catchUnhandled?: (error: Error) => void,\r\n  catchDropped?: (error: Error) => void,\r\n  finallyUnhandled?: () => void,\r\n  finallyDropped?: () => void,\r\n}\r\n\r\nclass ObservablePromiseStatus<ResultType> {\r\n  public lastResult: ResultType | undefined = undefined;\r\n  public lastError: Error | undefined = undefined;\r\n  public status: PromiseStatus | undefined = undefined;\r\n  private currentPromise: Promise<ResultType> | null = null;\r\n\r\n  constructor() {\r\n    makeObservable(this, {\r\n      lastResult: observable,\r\n      lastError: observable,\r\n      status: observable,\r\n      setResult: action,\r\n      setError: action,\r\n      reset: action,\r\n      track: action,\r\n      result: computed,\r\n      error: computed,\r\n      tracking: computed,\r\n      loading: computed,\r\n      finished: computed,\r\n    });\r\n  }\r\n\r\n  public setResult(result: ResultType) {\r\n    this.lastResult = result;\r\n    this.lastError = undefined;\r\n    this.status = 'fulfilled';\r\n  }\r\n\r\n  public setError(error: Error) {\r\n    this.lastError = error;\r\n    this.lastResult = undefined;\r\n    this.status = 'rejected';\r\n  }\r\n\r\n  public reset() {\r\n    this.lastResult = undefined;\r\n    this.lastError = undefined;\r\n    this.status = undefined;\r\n    this.currentPromise = null;\r\n  }\r\n\r\n  public get result() {\r\n    if (this.status === 'pending')\r\n      return undefined;\r\n    return this.lastResult;\r\n  }\r\n\r\n  public get error() {\r\n    if (this.status === 'pending')\r\n      return undefined;\r\n    return this.lastError;\r\n  }\r\n\r\n  public get tracking() {\r\n    return this.status !== undefined;\r\n  }\r\n\r\n  public get loading() {\r\n    return this.status === 'pending';\r\n  }\r\n\r\n  public get finished() {\r\n    return this.status === 'fulfilled' || this.status === 'rejected';\r\n  }\r\n\r\n  public track(promise: Promise<ResultType>, opts: TrackOptions<ResultType>) {\r\n    const {\r\n      thenUnhandled,\r\n      thenDropped,\r\n      catchUnhandled,\r\n      catchDropped,\r\n      finallyUnhandled,\r\n      finallyDropped,\r\n    } = opts;\r\n    this.currentPromise = promise;\r\n    this.status = 'pending';\r\n    promise.then((result) => {\r\n      if (promise !== this.currentPromise) {\r\n        thenDropped?.(result);\r\n        return;\r\n      }\r\n      this.setResult(result);\r\n      thenUnhandled?.(result);\r\n    }).catch((error) => {\r\n      if (promise !== this.currentPromise) {\r\n        catchDropped?.(error);\r\n        return;\r\n      }\r\n      this.setError(error);\r\n      catchUnhandled?.(error);\r\n    }).finally(() => {\r\n      if (promise != this.currentPromise) {\r\n        finallyDropped?.();\r\n        return;\r\n      }\r\n      finallyUnhandled?.();\r\n    });\r\n  }\r\n}\r\n\r\nexport default ObservablePromiseStatus;\r\n","import { action, makeObservable, observable } from 'mobx';\r\n\r\nclass OpenState {\r\n  constructor(public isOpen: boolean = false) {\r\n    makeObservable(this, {\r\n      isOpen: observable,\r\n      open: action.bound,\r\n      close: action.bound,\r\n      toggle: action.bound,\r\n    });\r\n  }\r\n\r\n  public open() {\r\n    this.isOpen = true;\r\n  }\r\n\r\n  public close() {\r\n    this.isOpen = false;\r\n  }\r\n\r\n  public toggle() {\r\n    this.isOpen = !this.isOpen;\r\n  }\r\n}\r\n\r\nexport default OpenState;\r\n","import { makeObservable, observable, action } from 'mobx';\r\n\r\nclass LoadingStatus {\r\n  public loading: boolean = false;\r\n\r\n  constructor() {\r\n    makeObservable(this, {\r\n      loading: observable,\r\n      setLoading: action,\r\n      setLoaded: action,\r\n    });\r\n  }\r\n\r\n  public setLoading() {\r\n    this.loading = true;\r\n  }\r\n\r\n  public setLoaded() {\r\n    this.loading = false;\r\n  }\r\n}\r\n\r\nexport default LoadingStatus;\r\n","import { gql } from '@apollo/client';\r\nimport apolloClient from 'core/apolloClient';\r\n\r\nconst query = gql`\r\nquery DailyStory {\r\n  public {\r\n    dailyStory {\r\n      id\r\n      createdAt\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport interface Story {\r\n  id: number;\r\n  createdAt: number;\r\n}\r\n\r\nexport type DailyStoryResponse = {\r\n  public: {\r\n    dailyStory: Story,\r\n  },\r\n};\r\n\r\nexport default async function GetDailyStory() {\r\n  const res = await apolloClient.query<DailyStoryResponse>({ query });\r\n  return res.data.public.dailyStory;\r\n}\r\n","import { gql } from '@apollo/client';\r\nimport apolloClient from 'core/apolloClient';\r\n\r\nconst query = gql`\r\nquery GetStatistics {\r\n  public {\r\n    statistics {\r\n      users\r\n      openTrees\r\n      stories\r\n      sentences\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport interface StatisticsQuery {\r\n  users: number;\r\n  openTrees: number;\r\n  stories: number;\r\n  sentences: number;\r\n}\r\n\r\nexport type GetStatisticsResponse = {\r\n  public: {\r\n    statistics: StatisticsQuery,\r\n  },\r\n};\r\n\r\nexport default async function GetStatistics() {\r\n  const res = await apolloClient.query<GetStatisticsResponse>({ query, fetchPolicy: 'no-cache' });\r\n  return res.data.public.statistics;\r\n}\r\n","import { Fetchable, OpenState } from 'core/utils';\r\nimport { GetDailyStory, GetStatistics } from './api';\r\n\r\nclass HomeStore {\r\n  public dailyStory = new Fetchable(GetDailyStory, { catchUnhandled: console.error });\r\n  public statistics = new Fetchable(GetStatistics, { catchUnhandled: console.error });\r\n  public settingsOpenState = new OpenState();\r\n\r\n  public pullRefresh() {\r\n    return Promise.all([\r\n      this.dailyStory.ensureSuccessReload(),\r\n      this.statistics.ensureSuccessReload(),\r\n    ]);\r\n  }\r\n\r\n  public refresh() {\r\n    return Promise.all([\r\n      this.dailyStory.ensureSuccess(),\r\n      this.statistics.ensureSuccess(),\r\n    ]);\r\n  }\r\n}\r\n\r\nexport default new HomeStore();\r\n","import { gql } from '@apollo/client';\r\nimport apolloClient from 'core/apolloClient';\r\n\r\nconst query = gql`\r\nquery PartialStory {\r\n  authenticated {\r\n    partialStory {\r\n      id\r\n      text\r\n      parentSentenceId\r\n      owner {\r\n        id\r\n        username\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport interface UserRestricted {\r\n  id: number;\r\n  username: string;\r\n}\r\n\r\nexport interface Sentence {\r\n  id: number;\r\n  text: string;\r\n  parentSentenceId: number | null;\r\n  owner: UserRestricted | null;\r\n  createdAt: number;\r\n}\r\n\r\nexport interface PartialStoryResponse {\r\n  authenticated: {\r\n    partialStory: Sentence[];\r\n  },\r\n}\r\n\r\nexport default async function GetPartialStory() {\r\n  const res = await apolloClient.query<PartialStoryResponse>({ query, fetchPolicy: 'no-cache' });\r\n  return res.data.authenticated.partialStory;\r\n}\r\n","import { makeObservable, computed } from 'mobx';\r\nimport { Fetchable } from 'core/utils/promise';\r\nimport { GetPartialStory } from './api';\r\n\r\nclass PartialStoryStore {\r\n  public partialStory = new Fetchable(GetPartialStory, { catchUnhandled: console.error });\r\n\r\n  constructor() {\r\n    makeObservable(this, {\r\n      lastSentence: computed,\r\n    });\r\n  }\r\n\r\n  public get lastSentence() {\r\n    const sentences = this.partialStory.result;\r\n    if (!sentences || sentences.length <= 0)\r\n      return null;\r\n    return sentences[sentences.length - 1];\r\n  }\r\n\r\n  public refresh() {\r\n    return this.partialStory.ensureSuccessReload();\r\n  }\r\n}\r\n\r\nexport default new PartialStoryStore();\r\n","import { gql } from '@apollo/client';\r\nimport apolloClient from 'core/apolloClient';\r\n\r\nconst query = gql`\r\nquery MyStories {\r\n  authenticated {\r\n    myStories {\r\n      id\r\n      title\r\n      createdAt\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport interface Story {\r\n  id: number;\r\n  title: string;\r\n  createdAt: number/*timestamp*/;\r\n}\r\n\r\nexport type MyStoriesResponse = {\r\n  authenticated: {\r\n    myStories: Story[],\r\n  },\r\n};\r\n\r\nexport default async function MyStories() {\r\n  const res = await apolloClient.query<MyStoriesResponse>({ query });\r\n  return res.data.authenticated.myStories;\r\n}\r\n","import { gql } from '@apollo/client';\r\nimport apolloClient from 'core/apolloClient';\r\n\r\nconst query = gql`\r\nquery Statistics {\r\n  authenticated {\r\n    statistics {\r\n      mySentences\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport type MySentencesCountResponse = {\r\n  authenticated: {\r\n    statistics: {\r\n      mySentences: number,\r\n    },\r\n  },\r\n}\r\n\r\nexport default async function MySentencesCount() {\r\n  const res = await apolloClient.query<MySentencesCountResponse>({ query });\r\n  return res.data.authenticated.statistics.mySentences;\r\n}\r\n","import { Fetchable } from 'core/utils/promise';\r\nimport { MyStories, MySentencesCount } from './api';\r\n\r\nclass LibraryStore {\r\n  public stories = new Fetchable(MyStories, { catchUnhandled: console.error });\r\n  public mySentencesCount = new Fetchable(MySentencesCount, { catchUnhandled: console.error });\r\n\r\n  public async refresh() {\r\n    await this.stories.ensureSuccessReload();\r\n    await this.mySentencesCount.ensureSuccessReload();\r\n  }\r\n}\r\n\r\nexport default new LibraryStore();\r\n","import { handleWithSnack } from 'core/utils/promise';\r\nimport homeStore from 'store/screens/home';\r\nimport partialStoryStore from 'store/screens/partial-story';\r\nimport libraryStore from 'store/screens/library';\r\n\r\nexport function homeHandler() {\r\n  const promise = homeStore.refresh();\r\n  handleWithSnack(promise, { successMessage: null, errorMessage: true });\r\n}\r\n\r\nexport function partialStoryHandler() {\r\n  const promise = partialStoryStore.refresh();\r\n  handleWithSnack(promise, { successMessage: null, errorMessage: true });\r\n}\r\n\r\nexport function libraryHandler() {\r\n  const promise = libraryStore.refresh();\r\n  handleWithSnack(promise, { successMessage: null, errorMessage: true })\r\n}\r\n","import { gql } from '@apollo/client';\r\nimport { Role } from 'core/api/types/enums';\r\nimport apolloClient from 'core/apolloClient';\r\n\r\nconst mutation = gql`\r\nmutation Login($email: String!, $password: String!) {\r\n  public {\r\n    account {\r\n      login(email: $email, password: $password) {\r\n        user {\r\n          id\r\n          username\r\n          email\r\n          role\r\n          createdAt\r\n          updatedAt\r\n        }\r\n        token\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport interface User {\r\n  id: number;\r\n  username: string;\r\n  email: string;\r\n  role: Role;\r\n  createdAt: number;\r\n  updatedAt: number;\r\n}\r\n\r\nexport type LoginResponse = {\r\n  public: {\r\n    account: {\r\n      login: {\r\n        user: User,\r\n        token: string,\r\n      },\r\n    },\r\n  }\r\n}\r\n\r\nexport interface LoginVariables {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport default function Login(variables: LoginVariables) {\r\n  return apolloClient.mutate<LoginResponse>({ mutation, variables });\r\n}\r\n","import { gql } from '@apollo/client';\r\nimport apolloClient from 'core/apolloClient';\r\n\r\nconst mutation = gql`\r\nmutation Register($username: String!, $email: String!, $password: String!, $emailValidationCode: String!) {\r\n  public {\r\n    account {\r\n      register(username: $username, email: $email, password: $password, emailValidationCode: $emailValidationCode)\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport interface RegisterVariables {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n  emailValidationCode: string;\r\n}\r\n\r\nexport default function Register(variables: RegisterVariables) {\r\n  return apolloClient.mutate({ mutation, variables });\r\n}\r\n","import type { Role } from 'core/api/types/enums';\r\n\r\nimport { gql } from '@apollo/client';\r\nimport apolloClient from 'core/apolloClient';\r\n\r\nconst query = gql`\r\nquery Account {\r\n  authenticated {\r\n    account {\r\n      id\r\n      username\r\n      email\r\n      role\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport interface User {\r\n  id: number;\r\n  username: string;\r\n  email: string;\r\n  role: Role;\r\n  createdAt: number;\r\n  updatedAt: number;\r\n}\r\n\r\nexport type GetAccountResponse = {\r\n  authenticated: {\r\n    account: User,\r\n  },\r\n}\r\n\r\nexport default async function GetAccount() {\r\n  const res = await apolloClient.query<GetAccountResponse>({ query });\r\n  return res.data.authenticated.account;\r\n}\r\n","import { gql } from '@apollo/client';\r\nimport apolloClient from 'core/apolloClient';\r\n\r\nconst query = gql`\r\nquery UsernameAvailability($username: String!) {\r\n  public {\r\n    account {\r\n      usernameAvailability(username: $username)\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport type UsernameAvailabilityResponse = {\r\n  public: {\r\n    account: {\r\n      usernameAvailability: boolean,\r\n    },\r\n  },\r\n};\r\n\r\nexport interface UsernameAvailabilityVariables {\r\n  username: string;\r\n}\r\n\r\nexport default async function UsernameAvailability(variables: UsernameAvailabilityVariables) {\r\n  const res = await apolloClient.query<UsernameAvailabilityResponse>({ query, variables });\r\n  return res.data.public.account.usernameAvailability;\r\n}\r\n","import { gql } from '@apollo/client';\r\nimport apolloClient from 'core/apolloClient';\r\n\r\nconst mutation = gql`\r\nmutation VerifyEmail($email: String!) {\r\n  public {\r\n    account {\r\n      verifyEmail(email: $email)\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport interface VerifyEmailVariables {\r\n  email: string;\r\n}\r\n\r\nexport default function VerifyEmail(variables: VerifyEmailVariables) {\r\n  return apolloClient.mutate({ mutation, variables });\r\n}\r\n","import { gql } from '@apollo/client';\r\nimport apolloClient from 'core/apolloClient';\r\n\r\nconst mutation = gql`\r\nmutation($email: String!) {\r\n  public {\r\n    account {\r\n      resendEmailVerificationCode(email: $email)\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport interface ResendEmailVerificationCodeVariables {\r\n  email: string;\r\n}\r\n\r\nexport default function ResendEmailVerificationCode(variables: ResendEmailVerificationCodeVariables) {\r\n  return apolloClient.mutate({ mutation, variables });\r\n}\r\n","import { gql } from '@apollo/client';\r\nimport apolloClient from 'core/apolloClient';\r\n\r\nconst mutation = gql`\r\nmutation DeleteAccount {\r\n  authenticated {\r\n    account {\r\n      deleteAccount\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport default function DeleteAccount() {\r\n  return apolloClient.mutate({ mutation });\r\n}\r\n","import { gql } from '@apollo/client';\r\nimport apolloClient from 'core/apolloClient';\r\n\r\nconst mutation = gql`\r\nmutation ForgotPassword($email: String!) {\r\n  public {\r\n    account {\r\n      forgotPassword(email: $email)\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport interface ForgotPasswordVariables {\r\n  email: string;\r\n}\r\n\r\nexport default function ForgotPassword(variables: ForgotPasswordVariables) {\r\n  return apolloClient.mutate({ mutation, variables });\r\n}\r\n","import { gql } from '@apollo/client';\r\nimport apolloClient from 'core/apolloClient';\r\n\r\nconst mutation = gql`\r\nmutation ResetPassword(\r\n  $email: String!\r\n  $newPassword: String!\r\n  $validationCode: String!\r\n) {\r\n  public {\r\n    account {\r\n      resetPassword(\r\n        email: $email\r\n        newPassword: $newPassword\r\n        validationCode: $validationCode\r\n      )\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport interface ResetPasswordVariables {\r\n  email: string;\r\n  newPassword: string;\r\n  validationCode: string;\r\n}\r\n\r\nexport default function ResetPassword(variables: ResetPasswordVariables) {\r\n  return apolloClient.mutate({ mutation, variables });\r\n}\r\n","import type { User, LoginVariables } from './api';\r\n\r\nimport assert from 'assert';\r\nimport { action, computed, makeObservable, observable } from 'mobx';\r\nimport { AuthTokenKey } from 'core/constants';\r\nimport Storage from 'core/storage';\r\nimport {\r\n  loginMutation,\r\n  UsernameAvailability,\r\n  VerifyEmail,\r\n  ResendEmailVerificationCode,\r\n  RegisterMutation,\r\n  GetAccount,\r\n  DeleteAccount,\r\n  ForgotPassword,\r\n  ResetPassword,\r\n} from './api';\r\n\r\nclass AccountStore {\r\n  user: User | null = null;\r\n\r\n  constructor() {\r\n    makeObservable(this, {\r\n      user: observable,\r\n      setUser: action,\r\n      loggedIn: computed,\r\n      loggedOut: computed,\r\n    });\r\n  }\r\n\r\n  setUser(user: User | null) {\r\n    this.user = user;\r\n  }\r\n\r\n  public get loggedIn() {\r\n    return this.user !== null;\r\n  }\r\n\r\n  public get loggedOut() {\r\n    return this.user === null;\r\n  }\r\n\r\n  public async login(variables: LoginVariables) {\r\n    const { data } = await loginMutation(variables);\r\n    assert(data);\r\n    const { user, token } = data.public.account.login;\r\n    this.setUser(user);\r\n    await Storage.setItem(AuthTokenKey, token, { secure: true });\r\n  }\r\n\r\n  public async logout() {\r\n    await Storage.deleteItem(AuthTokenKey, { secure: true });\r\n    this.setUser(null);\r\n  }\r\n\r\n  public register = RegisterMutation;\r\n\r\n  // Note: use this for username validation on register screen\r\n  public usernameAvailability = UsernameAvailability;\r\n\r\n  public verifyEmail = VerifyEmail;\r\n\r\n  public resendEmailVerificationCode = ResendEmailVerificationCode;\r\n\r\n  public async refreshAccount() {\r\n    const authToken = await Storage.getItem(AuthTokenKey, { secure: true });\r\n    if (authToken === null)\r\n      return;\r\n    const account = await GetAccount();\r\n    this.setUser(account);\r\n  }\r\n\r\n  public async deleteAccount() {\r\n    await DeleteAccount();\r\n    await this.logout();\r\n  }\r\n\r\n  public forgotPassword = ForgotPassword;\r\n\r\n  public resetPassword = ResetPassword;\r\n}\r\n\r\nexport default new AccountStore();\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport { isMobile } from 'core/device';\r\nimport Storage from 'core/storage';\r\n\r\nclass OnboardingStore {\r\n  private static OnboardingStorageKey = 'onboaring';\r\n\r\n  public onboardingCompleted: boolean | null = null;\r\n\r\n  constructor() {\r\n    makeObservable(this, {\r\n      onboardingCompleted: observable,\r\n      setOnboardingCompleted: action,\r\n    });\r\n  }\r\n\r\n  public setOnboardingCompleted(state: boolean) {\r\n    this.onboardingCompleted = state;\r\n  }\r\n\r\n  public saveOnboardingCompleted() {\r\n    return Storage.setItem(OnboardingStore.OnboardingStorageKey, 'completed');\r\n  }\r\n\r\n  public async refresh() {\r\n    const onboardingState = await Storage.getItem(OnboardingStore.OnboardingStorageKey);\r\n    // Note: Onboarding screen does not work on web/desktop\r\n    this.setOnboardingCompleted(onboardingState !== null || !isMobile);\r\n  }\r\n}\r\n\r\nexport default new OnboardingStore();\r\n","import { LoadingStatus } from 'core/utils';\r\nimport accountStore from 'store/common/account';\r\nimport onboardingStore from 'store/screens/onboarding';\r\nimport homeStore from 'store/screens/home';\r\n\r\nclass AppStore extends LoadingStatus {\r\n  constructor() {\r\n    super();\r\n    this.refresh().catch(console.warn);\r\n  }\r\n\r\n  public async refresh() {\r\n    this.setLoading();\r\n    await Promise.allSettled([\r\n      onboardingStore.refresh(),\r\n      accountStore.refreshAccount(),\r\n      homeStore.refresh(),\r\n    ]);\r\n    this.setLoaded();\r\n  }\r\n}\r\n\r\nexport default new AppStore();\r\n","import React from 'react';\r\nimport { StyleSheet, View, ActivityIndicator } from 'react-native';\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <View style={styles.container}>\r\n      <ActivityIndicator size=\"large\" />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    backgroundColor: '#2b2b2b',\r\n  },\r\n});\r\n\r\nexport default Loading;\r\n","import { gql } from '@apollo/client';\r\nimport apolloClient from 'core/apolloClient';\r\n\r\nconst mutation = gql`\r\nmutation($sentenceId: Int) {\r\n  authenticated {\r\n    sentence(id: $sentenceId) {\r\n      report\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport interface ReportSentenceVariables {\r\n  sentenceId: number;\r\n}\r\n\r\nexport default function ReportSentence(variables: ReportSentenceVariables) {\r\n  return apolloClient.mutate<boolean>({ mutation, variables });\r\n}\r\n","import { gql } from '@apollo/client'\r\nimport apolloClient from 'core/apolloClient';\r\n\r\nconst mutation = gql`\r\nmutation Sentence($sentenceId: Int) {\r\n  authenticated {\r\n    sentence(id: $sentenceId) {\r\n      markCompleted\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport interface MarkSentenceCompletedVariables {\r\n  sentenceId: number;\r\n}\r\n\r\nexport default function MarkSentenceCompleted(variables: MarkSentenceCompletedVariables) {\r\n  return apolloClient.mutate<boolean>({ mutation, variables });\r\n}\r\n","import { gql } from '@apollo/client';\r\nimport apolloClient from 'core/apolloClient';\r\n\r\nconst mutation = gql`\r\nmutation CreateSentence($parentSentenceId: Int!, $text: String!) {\r\n  authenticated {\r\n    sentence {\r\n      create(parentSentenceId: $parentSentenceId, text: $text) {\r\n        id\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport interface CreateSentenceVariables {\r\n  parentSentenceId: number;\r\n  text: string;\r\n}\r\n\r\nexport default function CreateSentence(variables: CreateSentenceVariables) {\r\n  return apolloClient.mutate({ mutation, variables });\r\n}\r\n","import {\r\n  ReportSentence,\r\n  MarkSentenceCompleted,\r\n  CreateSentence,\r\n } from './api';\r\n\r\nclass SentenceStore {\r\n  public report = ReportSentence;\r\n\r\n  public markCompleted = MarkSentenceCompleted;\r\n\r\n  public create = CreateSentence;\r\n}\r\n\r\nexport default new SentenceStore();\r\n","import React from 'react';\r\nimport { format } from 'date-fns';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { StyleSheet, Text } from 'react-native';\r\nimport { Menu, Divider } from 'react-native-paper';\r\nimport { handleWithSnack } from 'core/utils/promise';\r\nimport accountStore from 'store/common/account';\r\nimport sentenceStore from 'store/common/sentence';\r\n\r\nexport interface Owner {\r\n  id: number;\r\n  username: string;\r\n}\r\n\r\nexport interface Sentence {\r\n  id: number;\r\n  text: string;\r\n  owner: Owner | null;\r\n  parentSentenceId: number | null;\r\n  createdAt: number;\r\n}\r\n\r\nexport interface SentenceProps {\r\n  sentence: Sentence;\r\n  disableControls?: boolean;\r\n  onReport?: (sentence: Sentence) => void,\r\n  onMarkedCompleted?: (sentence: Sentence) => void,\r\n}\r\n\r\nconst Sentence = (props: SentenceProps) => {\r\n  const { sentence, disableControls, onReport, onMarkedCompleted } = props;\r\n  const { t } = useTranslation('common', { keyPrefix: 'sentencesList' });\r\n  const [menuVisibility, setMenuVisibility] = React.useState(false);\r\n  return (\r\n    <Menu\r\n      visible={menuVisibility}\r\n      onDismiss={() => setMenuVisibility(false)}\r\n      anchor={\r\n        <Text\r\n          style={[\r\n            styles.text,\r\n            { fontWeight: (accountStore.user && sentence.owner?.id === accountStore.user.id ? 'bold' : undefined) }\r\n          ]}\r\n          onPress={() => setMenuVisibility(true)}\r\n        >\r\n          {sentence.text}\r\n        </Text>\r\n      }\r\n      anchorPosition=\"bottom\"\r\n    >\r\n      <Menu.Item\r\n        titleStyle={styles.userTitle}\r\n        title={`${sentence.owner?.username || t('deletedUser')} - ${format(sentence.createdAt, t('misc.dateFormat'))}`}\r\n      />\r\n      <Divider />\r\n      <Menu.Item\r\n        title={t('report')}\r\n        leadingIcon=\"alert\"\r\n        disabled={disableControls || sentence.parentSentenceId === null}\r\n        onPress={() => {\r\n          const promise = sentenceStore.report({ sentenceId: sentence.id });\r\n          handleWithSnack(promise, {\r\n            successMessage: t('reportSuccessfull'),\r\n            onSuccess: () => {\r\n              setMenuVisibility(false);\r\n              onReport?.(sentence);\r\n            },\r\n            errorMessage: true,\r\n          });\r\n        }}\r\n      />\r\n      <Menu.Item\r\n        title={t('markCompleted')}\r\n        leadingIcon=\"check-circle\"\r\n        disabled={disableControls || sentence.parentSentenceId === null}\r\n        onPress={() => {\r\n          const promise = sentenceStore.markCompleted({ sentenceId: sentence.id });\r\n          handleWithSnack(promise, {\r\n            successMessage: t('markCompletedSuccessfull'),\r\n            onSuccess: () => {\r\n              setMenuVisibility(false);\r\n              onMarkedCompleted?.(sentence);\r\n            },\r\n            errorMessage: true,\r\n          });\r\n        }}\r\n      />\r\n    </Menu>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  text: {\r\n    fontSize: 16,\r\n    color: '#fafafa',\r\n    lineHeight: 32,\r\n  },\r\n  userTitle: {\r\n    fontSize: 12,\r\n    fontWeight: 'bold',\r\n  },\r\n});\r\n\r\nexport default Sentence;\r\n","import type { FlatListProps } from 'react-native';\r\nimport type { Sentence as SentenceT } from './Sentence';\r\n\r\nimport React from 'react';\r\nimport { FlatList } from 'react-native';\r\nimport { ActivityIndicator, Divider } from 'react-native-paper';\r\nimport Sentence from './Sentence';\r\n\r\nexport type OmittedProps = 'renderItem' | 'keyExtractor' | 'ListEmptyComponent' | 'ItemSeparatorComponent';\r\n\r\nexport interface SentencesListProps extends Omit<FlatListProps<SentenceT>, OmittedProps> {\r\n  disableControls?: boolean;\r\n  onReport?: (sentence: SentenceT) => void,\r\n  onMarkedCompleted?: (sentence: SentenceT) => void,\r\n}\r\n\r\nconst SentencesList = (props: SentencesListProps) => {\r\n  const { disableControls, onReport, onMarkedCompleted, ...passedProps } = props;\r\n  return (\r\n    <FlatList\r\n      {...passedProps}\r\n      renderItem={({ item }) => (\r\n        <Sentence\r\n          sentence={item}\r\n          disableControls={disableControls}\r\n          onReport={onReport}\r\n          onMarkedCompleted={onMarkedCompleted}\r\n        />\r\n      )}\r\n      keyExtractor={(item) => item.id.toString()}\r\n      ListEmptyComponent={ActivityIndicator}\r\n      ItemSeparatorComponent={() => <Divider bold style={{ width: '8%', backgroundColor: 'burlywood' }} />}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SentencesList;\r\n","import type { ModalProps } from 'react-native-paper';\r\n\r\nimport React from 'react';\r\nimport { StyleSheet, Keyboard } from 'react-native';\r\nimport { Modal, Text, TextInput, Button } from 'react-native-paper';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Second } from 'lib/utils/time';\r\n\r\nconst ResendButtonDisabledDelayMs = 30 * Second;\r\n\r\nexport interface ValidationCodeModalProps extends Omit<ModalProps, 'children' | 'theme' | 'contentContainerStyle' | 'dismissable'> {\r\n  codeLength: number;\r\n  onCodeChange?: (code: string) => void;\r\n  onCodeCompleted: (code: string) => void;\r\n  onResendCode: () => void;\r\n}\r\n\r\nconst CodeValidationModal = (props: ValidationCodeModalProps) => {\r\n  const { codeLength, onCodeChange, onCodeCompleted, onResendCode, ...passedProps } = props;\r\n  const { t } = useTranslation('common', { keyPrefix: 'codeValidationModal' });\r\n  const [resendBtnDisabled, setResendBtnDisabled] = React.useState(false);\r\n  const placeholderStr = React.useMemo(() => ''.padStart(codeLength, '-'), [codeLength]);\r\n\r\n  return (\r\n    <Modal {...passedProps} dismissable={false} contentContainerStyle={styles.container}>\r\n      <Text variant=\"titleLarge\" style={styles.title}>{t('title')}</Text>\r\n      <Text variant=\"titleSmall\" style={styles.subtitle}>{t('subTitle')}</Text>\r\n      <TextInput\r\n        mode=\"outlined\"\r\n        textAlign=\"center\"\r\n        placeholder={placeholderStr}\r\n        style={styles.codeInput}\r\n        textContentType=\"oneTimeCode\"\r\n        keyboardType=\"number-pad\"\r\n        maxLength={codeLength}\r\n        onChangeText={text => {\r\n          onCodeChange?.(text);\r\n          if (text.length >= codeLength) {\r\n            Keyboard.dismiss();\r\n            onCodeCompleted(text);\r\n          }\r\n        }}\r\n      />\r\n      <Button\r\n        icon=\"reload\"\r\n        style={styles.resendCodeBtn}\r\n        onPress={() => {\r\n          setResendBtnDisabled(true);\r\n          setTimeout(() => {\r\n            setResendBtnDisabled(false);\r\n          }, ResendButtonDisabledDelayMs);\r\n          onResendCode();\r\n        }}\r\n        disabled={resendBtnDisabled}\r\n      >\r\n        {t('resendCode')}\r\n      </Button>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    margin: 20,\r\n    backgroundColor: '#404040',\r\n    padding: 20,\r\n    borderRadius: 20,\r\n    borderWidth: 4,\r\n    borderColor: '#333333'\r\n  },\r\n  title: {\r\n    fontWeight: 'bold',\r\n    marginVertical: 10,\r\n  },\r\n  subtitle: {\r\n    marginBottom: 20,\r\n  },\r\n  codeInput: {\r\n    fontSize: 32,\r\n    height: 64,\r\n    textAlign: 'center',\r\n  },\r\n  resendCodeBtn: {\r\n    marginTop: 25\r\n  },\r\n});\r\n\r\nexport default CodeValidationModal;\r\n","import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\r\nimport type { RootStackParamList } from 'components/Navigator';\r\n\r\nimport * as React from 'react';\r\nimport { StyleSheet } from 'react-native';\r\nimport { FAB } from 'react-native-paper';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { useTranslation } from 'react-i18next';\r\nimport accountStore from 'store/common/account';\r\n\r\nconst ParticipationFab = () => {\r\n  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\r\n  const { t } = useTranslation('common', { keyPrefix: 'participationFab' });\r\n\r\n  return (\r\n    <FAB\r\n      icon=\"pencil-plus\"\r\n      label={t('participate')}\r\n      style={styles.fab}\r\n      onPress={() => {\r\n        if (accountStore.user !== null)\r\n          navigation.navigate('PartialStory');\r\n        else\r\n          navigation.navigate('Login');\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  fab: {\r\n    position: 'absolute',\r\n    right: 40,\r\n    bottom: 50,\r\n  },\r\n});\r\n\r\nexport default ParticipationFab;\r\n","import React from 'react';\r\nimport { StyleSheet, View, ImageBackground } from 'react-native';\r\nimport { Text, IconButton } from 'react-native-paper';\r\nimport { observer } from 'mobx-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Images } from 'core/constants';\r\nimport store from 'store/screens/home';\r\nimport accountStore from 'store/common/account';\r\n\r\nconst Hero = observer(() => {\r\n  const { t } = useTranslation('screens', { keyPrefix: 'home.hero' });\r\n  return (\r\n    <ImageBackground source={Images.home.treeBackground} resizeMode=\"cover\" style={styles.container}>\r\n      <View style={styles.textOverlay}>\r\n        <Text variant=\"titleLarge\">{t('hello')}</Text>\r\n        <Text variant=\"headlineLarge\" style={{ fontWeight: 'bold' }}>\r\n          {`${accountStore.user?.username ?? t('guest')}.`}\r\n        </Text>\r\n        <IconButton\r\n          icon=\"cog\"\r\n          size={30}\r\n          style={styles.settingsIcon}\r\n          onPress={store.settingsOpenState.toggle}\r\n        />\r\n      </View>\r\n    </ImageBackground>\r\n  );\r\n});\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    width: '100%',\r\n    minHeight: 250,\r\n    borderBottomLeftRadius: 24,\r\n    borderBottomRightRadius: 24,\r\n    overflow: 'hidden',\r\n  },\r\n  textOverlay: {\r\n    flex: 1,\r\n    paddingTop: 60,\r\n    paddingLeft: 30,\r\n    backgroundColor: 'rgba(40,40,40, 0.5)',\r\n  },\r\n  settingsIcon: {\r\n    position: 'absolute',\r\n    top: 40,\r\n    right: 5,\r\n  },\r\n});\r\n\r\nexport default Hero;\r\n","import React from 'react';\r\nimport { StyleSheet } from 'react-native';\r\nimport { Card, Avatar, List } from 'react-native-paper';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport store from 'store/screens/home';\r\n\r\nconst Statistics = observer(() => {\r\n  const { t } = useTranslation('screens', { keyPrefix: 'home.statistics' });\r\n  const formatValue = (value: number | undefined): string => (\r\n    value !== undefined ? value.toString() : t('nullValue')\r\n  );\r\n  const statistics = store.statistics.lastResult;\r\n  return (\r\n    <Card style={styles.container}>\r\n      <Card.Title\r\n        title={t('title')}\r\n        titleVariant=\"titleLarge\"\r\n        titleStyle={{ fontWeight: 'bold' }}\r\n        right={(props) => (\r\n          <Avatar.Icon\r\n            {...props}\r\n            icon=\"chart-donut\"\r\n            color=\"whitesmoke\"\r\n            size={48}\r\n            style={{ backgroundColor: 'transparent' }}\r\n          />\r\n        )}\r\n      />\r\n      <Card.Content>\r\n        <List.Item\r\n          title={formatValue(statistics?.users)}\r\n          description={t('stats.users')}\r\n          left={props => <List.Icon {...props} icon=\"account-group\" />}\r\n          style={styles.itemStyle}\r\n        />\r\n        <List.Item\r\n          title={formatValue(statistics?.openTrees)}\r\n          description={t('stats.trees')}\r\n          left={props => <List.Icon {...props} icon=\"pine-tree\" />}\r\n          style={styles.itemStyle}\r\n        />\r\n        <List.Item\r\n          title={formatValue(statistics?.stories)}\r\n          description={t('stats.stories')}\r\n          left={props => <List.Icon {...props} icon=\"book-open-variant\" />}\r\n          style={styles.itemStyle}\r\n        />\r\n        <List.Item\r\n          title={formatValue(statistics?.sentences)}\r\n          description={t('stats.sentences')}\r\n          left={props => <List.Icon {...props} icon=\"send\" />}\r\n          style={styles.itemStyle}\r\n        />\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n});\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    marginTop: 20,\r\n    backgroundColor: '#323232',\r\n  },\r\n  itemStyle: {\r\n    paddingVertical: 0,\r\n  },\r\n});\r\n\r\nexport default Statistics;\r\n","import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\r\nimport type { RootStackParamList } from 'components/Navigator';\r\n\r\nimport assert from 'assert';\r\nimport React from 'react';\r\nimport { StyleSheet } from 'react-native';\r\nimport { Card, Avatar } from 'react-native-paper';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { observer } from 'mobx-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport store from 'store/screens/home';\r\n\r\nconst DailyStory = observer(() => {\r\n  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\r\n  const { t } = useTranslation('screens', { keyPrefix: 'home.dailyStory' });\r\n  return (\r\n    <Card\r\n      style={styles.container}\r\n      onPress={() => {\r\n        const storyId = store.dailyStory.lastResult?.id;\r\n        assert(storyId !== undefined);\r\n        navigation.navigate('StoryViewer', { storyId });\r\n      }}\r\n    >\r\n      <Card.Title\r\n        title={t('title')}\r\n        subtitle={t('subtitle')}\r\n        titleVariant=\"titleLarge\"\r\n        titleStyle={{ fontWeight: 'bold' }}\r\n        right={(props) => (\r\n          <Avatar.Icon\r\n            {...props}\r\n            icon=\"calendar-today\"\r\n            color=\"whitesmoke\"\r\n            size={48}\r\n            style={{ backgroundColor: 'transparent' }}\r\n          />\r\n        )}\r\n      />\r\n    </Card>\r\n  );\r\n});\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    marginTop: 20,\r\n    backgroundColor: '#323232',\r\n  },\r\n});\r\n\r\nexport default DailyStory;\r\n","import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\r\nimport type { RootStackParamList } from 'components/Navigator';\r\n\r\nimport React from 'react';\r\nimport { StyleSheet } from 'react-native';\r\nimport { Card, Avatar } from 'react-native-paper';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { useTranslation } from 'react-i18next';\r\nimport accountStore from 'store/common/account';\r\n\r\nconst MyLibrary = () => {\r\n  const { t } = useTranslation('screens', { keyPrefix: 'home.myLibrary' });\r\n  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\r\n  return (\r\n    <Card\r\n      style={styles.container}\r\n      onPress={() => {\r\n        if (accountStore.user !== null)\r\n          navigation.navigate('Library');\r\n        else\r\n          navigation.navigate('Login');\r\n      }}\r\n    >\r\n      <Card.Title\r\n        title={t('title')}\r\n        subtitle={t('subtitle')}\r\n        titleVariant=\"titleLarge\"\r\n        titleStyle={{ fontWeight: 'bold' }}\r\n        right={(props) => (\r\n          <Avatar.Icon\r\n            icon=\"bookshelf\"\r\n            color=\"whitesmoke\"\r\n            size={48}\r\n            style={{ backgroundColor: 'transparent' }}\r\n          />\r\n        )}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    marginTop: 20,\r\n    backgroundColor: '#323232',\r\n  },\r\n});\r\n\r\nexport default MyLibrary;\r\n","import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\r\nimport type { RootStackParamList } from 'components/Navigator';\r\n\r\nimport React from 'react';\r\nimport { Alert, Linking } from 'react-native';\r\nimport { List } from 'react-native-paper';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { observer } from 'mobx-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { handleWithSnack } from 'core/utils';\r\nimport { baptechWebsiteURL } from 'core/constants';\r\nimport { BottomSheet } from 'components/common';\r\nimport accountStore from 'store/common/account';\r\nimport store from 'store/screens/home';\r\n\r\nconst SettingsSheet = observer(() => {\r\n  const { t } = useTranslation('screens', { keyPrefix: 'home.settingsSheet' });\r\n  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\r\n  return (\r\n    <BottomSheet\r\n      title={t('title')}\r\n      onClose={store.settingsOpenState.close}\r\n      open={store.settingsOpenState.isOpen}\r\n      animationDuration={250}\r\n      scrollViewProps={{ style: { padding: 10 } }}\r\n    >\r\n      {accountStore.user &&\r\n        <List.Item\r\n          title={accountStore.user.username}\r\n          description={accountStore.user.email}\r\n          left={props => <List.Icon {...props} icon=\"account\" />}\r\n          style={{ marginBottom: 10 }}\r\n        />\r\n      }\r\n\r\n      <List.Section>\r\n        <List.Subheader>{t('actions')}</List.Subheader>\r\n        <List.Item\r\n          title={t('about')}\r\n          left={props => <List.Icon {...props} icon=\"information\" />}\r\n          onPress={() => {\r\n            store.settingsOpenState.close();\r\n            navigation.navigate('Onboarding');\r\n          }}\r\n        />\r\n        <List.Item\r\n          title={t('support')}\r\n          left={props => <List.Icon {...props} icon=\"face-agent\" />}\r\n          onPress={() => {\r\n            Linking.canOpenURL(baptechWebsiteURL).then((canOpen) => {\r\n              if (canOpen)\r\n                Linking.openURL(baptechWebsiteURL).catch(console.error);\r\n            }).catch(console.error);\r\n          }}\r\n        />\r\n        {accountStore.loggedIn &&\r\n          <List.Item\r\n            title={t('logout')}\r\n            left={props => <List.Icon {...props} icon=\"logout\" />}\r\n            onPress={() => {\r\n              const promise = accountStore.logout();\r\n              handleWithSnack(promise, {\r\n                successMessage: t('logoutSuccess'),\r\n                onSuccess: store.settingsOpenState.close,\r\n                errorMessage: true,\r\n              });\r\n            }}\r\n          />\r\n        }\r\n      </List.Section>\r\n\r\n      {accountStore.loggedIn &&\r\n        <List.Section style={{ borderWidth: 1, borderColor: 'rgba(255, 77, 77, .5)', marginTop: 20 }}>\r\n          <List.Subheader>{t('dangerZone')}</List.Subheader>\r\n          <List.Item\r\n            title={t('deleteAccount')}\r\n            left={props => <List.Icon {...props} icon=\"delete\" />}\r\n            onPress={() => {\r\n              Alert.alert(\r\n                t('accountDeletionAlert.title'),\r\n                t('accountDeletionAlert.description'),\r\n                [\r\n                  {\r\n                    text: t('accountDeletionAlert.cancel'),\r\n                    style: 'cancel'\r\n                  },\r\n                  {\r\n                    text: t('accountDeletionAlert.submit'),\r\n                    style: 'destructive',\r\n                    onPress: () => {\r\n                      const promise = accountStore.deleteAccount();\r\n                      handleWithSnack(promise, {\r\n                        successMessage: t('accountDeletionSuccess'),\r\n                        errorMessage: true,\r\n                      });\r\n                    }\r\n                  },\r\n                ],\r\n              );\r\n            }}\r\n          />\r\n        </List.Section>\r\n      }\r\n    </BottomSheet>\r\n  );\r\n});\r\n\r\nexport default SettingsSheet;\r\n","export const baptechWebsiteURL = 'https://www.baptech.fr/';\r\n","import type { RootStackParamList } from 'components/Navigator';\r\nimport type { NativeStackScreenProps } from '@react-navigation/native-stack';\r\n\r\nimport React from 'react';\r\nimport { StyleSheet, View, ScrollView, RefreshControl } from 'react-native';\r\nimport { observer } from 'mobx-react';\r\nimport { handleWithSnack } from 'core/utils/promise';\r\nimport store from 'store/screens/home';\r\nimport { ParticipationFab } from 'components/common';\r\nimport Hero from './Hero';\r\nimport Statistics from './Statistics';\r\nimport DailyStory from './DailyStory';\r\nimport MyLibrary from './MyLibrary';\r\nimport SettingsSheet from './SettingsSheet';\r\n\r\ntype NavigationProps = NativeStackScreenProps<RootStackParamList, 'Home'>;\r\n\r\nconst Home = observer((props: NavigationProps) => {\r\n  return (\r\n    <View style={styles.container}>\r\n      <ScrollView refreshControl={\r\n        <RefreshControl\r\n          refreshing={store.dailyStory.loading || store.statistics.loading}\r\n          onRefresh={() => {\r\n            const promise = store.pullRefresh();\r\n            handleWithSnack(promise, { successMessage: null, errorMessage: true });\r\n          }}\r\n        />\r\n      }>\r\n        <Hero />\r\n        <View style={styles.cardsContainer}>\r\n          {store.dailyStory.lastResult && <DailyStory />}\r\n          <MyLibrary />\r\n          <Statistics />\r\n        </View>\r\n      </ScrollView>\r\n      <ParticipationFab />\r\n      <SettingsSheet />\r\n    </View>\r\n  );\r\n});\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  cardsContainer: {\r\n    paddingHorizontal: 10,\r\n  },\r\n  fab: {\r\n    position: 'absolute',\r\n    right: 40,\r\n    bottom: 50,\r\n  },\r\n});\r\n\r\nexport default Home;","import type { RootStackParamList } from 'components/Navigator';\r\nimport type { NativeStackScreenProps } from '@react-navigation/native-stack';\r\n\r\nimport React from 'react';\r\nimport {\r\n  StyleSheet,\r\n  Platform,\r\n  SafeAreaView,\r\n  View,\r\n  KeyboardAvoidingView,\r\n  Keyboard,\r\n} from 'react-native';\r\nimport { TextInput, Button, Text } from 'react-native-paper';\r\nimport { useHeaderHeight } from '@react-navigation/elements';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { handleWithSnack } from 'core/utils/promise';\r\nimport store from 'store/common/account';\r\n\r\nconst LoginValidationSchema = Yup.object().shape({\r\n  email: Yup.string().email().required(),\r\n  password: Yup.string().required(),\r\n});\r\n\r\ntype NavigationProps = NativeStackScreenProps<RootStackParamList, 'Login'>;\r\n\r\nconst Login = (props: NavigationProps) => {\r\n  const { navigation } = props;\r\n  const { t } = useTranslation('screens', { keyPrefix: 'login' });\r\n  const headerHeight = useHeaderHeight();\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <KeyboardAvoidingView\r\n        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\r\n        keyboardVerticalOffset={headerHeight}\r\n        style={{ flex: 1, justifyContent: 'center' }}\r\n      >\r\n        <Formik\r\n          initialValues={{\r\n            email: '',\r\n            password: '',\r\n          }}\r\n          validationSchema={LoginValidationSchema}\r\n          onSubmit={values => {\r\n            Keyboard.dismiss();\r\n            const promise = store.login(values);\r\n            return handleWithSnack(promise, {\r\n              successMessage: null,\r\n              errorMessage: true,\r\n              onSuccess: () => { navigation.reset({ index: 0, routes: [{ name: 'Home' }] }); },\r\n            });\r\n          }}\r\n        >\r\n          {({ handleChange, handleSubmit, values, errors, touched, isSubmitting }) => (\r\n            <View style={styles.formContainer}>\r\n              <View style={styles.headline}>\r\n                <Text variant=\"headlineLarge\">{t('form.headlineTitle')}</Text>\r\n                <Text variant=\"titleSmall\">{t('form.headlineDescription')}</Text>\r\n              </View>\r\n              <TextInput\r\n                label={t('form.email')}\r\n                mode=\"outlined\"\r\n                keyboardType=\"email-address\"\r\n                textContentType=\"emailAddress\"\r\n                right={<TextInput.Icon icon=\"email\" />}\r\n                style={styles.textField}\r\n                value={values.email}\r\n                onChangeText={handleChange('email')}\r\n                error={Boolean(errors.email) && touched.email}\r\n              />\r\n              <TextInput\r\n                label={t('form.password')}\r\n                mode=\"outlined\"\r\n                secureTextEntry\r\n                textContentType=\"password\"\r\n                right={<TextInput.Icon icon=\"lock\" />}\r\n                style={styles.textField}\r\n                value={values.password}\r\n                onChangeText={handleChange('password')}\r\n                error={Boolean(errors.password) && touched.password}\r\n              />\r\n              <Button\r\n                mode=\"contained\"\r\n                style={styles.button}\r\n                disabled={isSubmitting}\r\n                loading={isSubmitting}\r\n                onPress={() => { handleSubmit(); }}\r\n              >\r\n                {t('form.submit')}\r\n              </Button>\r\n              <Button\r\n                mode=\"outlined\"\r\n                style={styles.button}\r\n                onPress={() => { navigation.navigate('Register'); }}\r\n              >\r\n                {t('form.register')}\r\n              </Button>\r\n              <Button\r\n                mode=\"text\"\r\n                style={styles.button}\r\n                onPress={() => navigation.navigate('ForgotPassword')}\r\n              >\r\n                {t('form.forgotPassword')}\r\n              </Button>\r\n            </View>\r\n          )}\r\n        </Formik>\r\n      </KeyboardAvoidingView>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  formContainer: {\r\n    marginHorizontal: 20,\r\n  },\r\n  headline: {\r\n    marginBottom: 20,\r\n  },\r\n  textField: {\r\n    marginVertical: 5,\r\n  },\r\n  button: {\r\n    marginTop: 20,\r\n  },\r\n});\r\n\r\nexport default Login;\r\n","import type { NativeStackScreenProps } from '@react-navigation/native-stack';\r\nimport type { RootStackParamList } from 'components/Navigator';\r\nimport type { RegisterVariables } from 'store/common/account/api';\r\n\r\nimport assert from 'assert';\r\nimport React from 'react';\r\nimport {\r\n  StyleSheet,\r\n  Platform,\r\n  SafeAreaView,\r\n  View,\r\n  KeyboardAvoidingView,\r\n  Keyboard,\r\n} from 'react-native';\r\nimport {\r\n  TextInput,\r\n  HelperText,\r\n  Button,\r\n  Text,\r\n} from 'react-native-paper';\r\nimport { useHeaderHeight } from '@react-navigation/elements';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { handleWithSnack } from 'core/utils/promise';\r\nimport {\r\n  UsernameMinLength,\r\n  UsernameMaxLength,\r\n  UsernameValidationRegex,\r\n  PasswordMinLength,\r\n  EmailVerificationCodeLength,\r\n} from 'core/constants';\r\nimport { CodeValidationModal } from 'components/common';\r\nimport store from 'store/common/account';\r\n\r\nconst RegisterValidationSchema = Yup.object().shape({\r\n  username: Yup.string().min(UsernameMinLength).max(UsernameMaxLength).matches(UsernameValidationRegex).required(),\r\n  email: Yup.string().email().required(),\r\n  password: Yup.string().min(PasswordMinLength).required(),\r\n});\r\n\r\ntype NavigationProps = NativeStackScreenProps<RootStackParamList, 'Register'>;\r\n\r\nconst Register = (props: NavigationProps) => {\r\n  const { navigation } = props;\r\n  const { t } = useTranslation('screens', { keyPrefix: 'register' });\r\n  const headerHeight = useHeaderHeight();\r\n  const [codeValidationModalOpen, setCodeValidationModalOpen] = React.useState(false);\r\n  const registerVariablesRef = React.useRef<Omit<RegisterVariables, 'emailValidationCode'> | null>(null);\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <KeyboardAvoidingView\r\n        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\r\n        keyboardVerticalOffset={headerHeight}\r\n        style={{ flex: 1, justifyContent: 'center' }}\r\n      >\r\n        <Formik\r\n          initialValues={{\r\n            username: '',\r\n            email: '',\r\n            password: '',\r\n          }}\r\n          validationSchema={RegisterValidationSchema}\r\n          onSubmit={values => {\r\n            const { email } = values;\r\n            Keyboard.dismiss();\r\n            registerVariablesRef.current = values;\r\n            const promise = store.verifyEmail({ email });\r\n            return handleWithSnack(promise, {\r\n              successMessage: null,\r\n              onSuccess: () => setCodeValidationModalOpen(true),\r\n              errorMessage: true,\r\n            });\r\n          }}\r\n        >\r\n          {({ handleChange, handleBlur, handleSubmit, values, errors, touched, isSubmitting }) => (\r\n            <View style={styles.formContainer}>\r\n              <View style={styles.headline}>\r\n                <Text variant=\"headlineLarge\">{t('form.headlineTitle')}</Text>\r\n                <Text variant=\"titleSmall\">{t('form.headlineDescription')}</Text>\r\n              </View>\r\n              <TextInput\r\n                label={t('form.username')}\r\n                mode=\"outlined\"\r\n                textContentType=\"username\"\r\n                right={<TextInput.Icon icon=\"account-circle\" />}\r\n                value={values.username}\r\n                onChangeText={handleChange('username')}\r\n                onBlur={handleBlur('username')}\r\n                error={Boolean(errors.username) && touched.username}\r\n              />\r\n              {Boolean(errors.username) && touched.username && <HelperText type=\"error\">{t('form.usernameHelper')}</HelperText>}\r\n              <TextInput\r\n                label={t('form.email')}\r\n                mode=\"outlined\"\r\n                keyboardType=\"email-address\"\r\n                textContentType=\"emailAddress\"\r\n                right={<TextInput.Icon icon=\"email\" />}\r\n                style={styles.textField}\r\n                value={values.email}\r\n                onChangeText={handleChange('email')}\r\n                onBlur={handleBlur('email')}\r\n                error={Boolean(errors.email) && touched.email}\r\n              />\r\n              <TextInput\r\n                label={t('form.password')}\r\n                mode=\"outlined\"\r\n                secureTextEntry\r\n                textContentType=\"password\"\r\n                right={<TextInput.Icon icon=\"lock\" />}\r\n                style={styles.textField}\r\n                value={values.password}\r\n                onChangeText={handleChange('password')}\r\n                onBlur={handleBlur('password')}\r\n                error={Boolean(errors.password) && touched.password}\r\n              />\r\n              <Button\r\n                mode=\"contained\"\r\n                style={styles.button}\r\n                disabled={isSubmitting}\r\n                loading={isSubmitting}\r\n                onPress={() => { handleSubmit(); }}\r\n              >\r\n                {t('form.submit')}\r\n              </Button>\r\n            </View>\r\n          )}\r\n        </Formik>\r\n      </KeyboardAvoidingView>\r\n      <CodeValidationModal\r\n        visible={codeValidationModalOpen}\r\n        codeLength={EmailVerificationCodeLength}\r\n        onResendCode={() => {\r\n          const email = registerVariablesRef.current?.email;\r\n          assert(email !== undefined)\r\n          const promise = store.resendEmailVerificationCode({ email });\r\n          handleWithSnack(promise, {\r\n            successMessage: null,\r\n            errorMessage: true,\r\n          });\r\n        }}\r\n        onCodeCompleted={(emailValidationCode) => {\r\n          assert(registerVariablesRef.current !== null);\r\n          const promise = store.register({\r\n            emailValidationCode,\r\n            ...registerVariablesRef.current,\r\n          });\r\n          handleWithSnack(promise, {\r\n            successMessage: t('form.registerSuccess'),\r\n            onSuccess: () => {\r\n              setCodeValidationModalOpen(false);\r\n              navigation.navigate('Login');\r\n            },\r\n            errorMessage: true,\r\n          });\r\n        }}\r\n      />\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  formContainer: {\r\n    marginHorizontal: 20,\r\n  },\r\n  headline: {\r\n    marginBottom: 20,\r\n  },\r\n  textField: {\r\n    marginVertical: 5,\r\n  },\r\n  button: {\r\n    marginTop: 20,\r\n  },\r\n});\r\n\r\nexport default Register;\r\n","import React from 'react';\r\nimport { Keyboard, View } from 'react-native';\r\nimport { Text, TextInput, Button } from 'react-native-paper';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { handleWithSnack } from 'core/utils';\r\nimport accountStore from 'store/common/account';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  email: Yup.string().email().required(),\r\n});\r\n\r\nexport interface ForgotPasswordFormProps {\r\n  onEmailSubmited: (email: string) => void,\r\n}\r\n\r\nconst ForgotPasswordForm = (props: ForgotPasswordFormProps) => {\r\n  const { onEmailSubmited } = props;\r\n  const { t } = useTranslation('screens', { keyPrefix: 'forgotPassword.forgotPasswordForm' });\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        email: '',\r\n      }}\r\n      validationSchema={validationSchema}\r\n      onSubmit={(values) => {\r\n        const { email } = values;\r\n        const promise = accountStore.forgotPassword({ email });\r\n        return handleWithSnack(promise, {\r\n          successMessage: null,\r\n          onSuccess: () => onEmailSubmited(email),\r\n          errorMessage: true,\r\n          onError: () => Keyboard.dismiss(),\r\n        });\r\n      }}\r\n    >\r\n      {({ handleChange, handleBlur, handleSubmit, values, errors, touched, isSubmitting }) => (\r\n        <View>\r\n          <View style={{ marginBottom: 32 }}>\r\n            <Text variant=\"headlineLarge\">{t('title')}</Text>\r\n            <Text variant=\"titleSmall\">{t('subtitle')}</Text>\r\n          </View>\r\n          <TextInput\r\n            label={t('emailLabel')}\r\n            mode=\"outlined\"\r\n            keyboardType=\"email-address\"\r\n            textContentType=\"emailAddress\"\r\n            right={<TextInput.Icon icon=\"email\" />}\r\n            value={values.email}\r\n            onChangeText={handleChange('email')}\r\n            onBlur={handleBlur('email')}\r\n            error={Boolean(errors.email) && touched.email}\r\n          />\r\n          <Button\r\n            mode=\"contained\"\r\n            disabled={isSubmitting}\r\n            loading={isSubmitting}\r\n            onPress={() => handleSubmit()}\r\n            style={{ marginTop: 32 }}\r\n          >\r\n            {t('submit')}\r\n          </Button>\r\n        </View>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default ForgotPasswordForm;\r\n","import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\r\nimport type { RootStackParamList } from 'components/Navigator';\r\n\r\nimport React from 'react';\r\nimport { Keyboard, View } from 'react-native';\r\nimport { Text, TextInput, Button } from 'react-native-paper';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {\r\n  PasswordMinLength,\r\n  ResetPasswordCodeLength,\r\n} from 'core/constants';\r\nimport { handleWithSnack } from 'core/utils';\r\nimport accountStore from 'store/common/account';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  newPassword: Yup.string().min(PasswordMinLength).required(),\r\n  validationCode: Yup.string().min(ResetPasswordCodeLength).required(),\r\n});\r\n\r\nexport interface ResetPasswordFormProps {\r\n  email: string,\r\n}\r\n\r\nconst ResetPasswordForm = (props: ResetPasswordFormProps) => {\r\n  const { email } = props;\r\n  const { t } = useTranslation('screens', { keyPrefix: 'forgotPassword.resetPasswordForm' });\r\n  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        newPassword: '',\r\n        validationCode: '',\r\n      }}\r\n      validationSchema={validationSchema}\r\n      onSubmit={(values) => {\r\n        const promise = accountStore.resetPassword({ ...values, email });\r\n        return handleWithSnack(promise, {\r\n          successMessage: null,\r\n          onSuccess: () => navigation.navigate('Login'),\r\n          errorMessage: true,\r\n          onError: () => Keyboard.dismiss(),\r\n        });\r\n      }}\r\n    >\r\n      {({ handleChange, handleBlur, handleSubmit, values, errors, touched, isSubmitting }) => (\r\n        <View>\r\n          <View style={{ marginBottom: 32 }}>\r\n            <Text variant=\"headlineLarge\">{t('title')}</Text>\r\n            <Text variant=\"titleSmall\">{t('subtitle')}</Text>\r\n          </View>\r\n          <TextInput\r\n            label={t('newPasswordLabel')}\r\n            mode=\"outlined\"\r\n            secureTextEntry\r\n            textContentType=\"password\"\r\n            right={<TextInput.Icon icon=\"lock\" />}\r\n            value={values.newPassword}\r\n            onChangeText={handleChange('newPassword')}\r\n            onBlur={handleBlur('newPassword')}\r\n            error={Boolean(errors.newPassword) && touched.newPassword}\r\n          />\r\n          <TextInput\r\n            label={t('validationCodeLabel')}\r\n            mode=\"outlined\"\r\n            autoCapitalize=\"characters\"\r\n            right={<TextInput.Icon icon=\"numeric\" />}\r\n            maxLength={ResetPasswordCodeLength}\r\n            value={values.validationCode}\r\n            onChangeText={handleChange('validationCode')}\r\n            onBlur={handleBlur('validationCode')}\r\n            error={Boolean(errors.validationCode) && touched.validationCode}\r\n            style={{ marginTop: 10 }}\r\n          />\r\n          <Button\r\n            mode=\"contained\"\r\n            disabled={isSubmitting}\r\n            loading={isSubmitting}\r\n            onPress={() => handleSubmit()}\r\n            style={{ marginTop: 32 }}\r\n          >\r\n            {t('submit')}\r\n          </Button>\r\n        </View>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default ResetPasswordForm;\r\n","import type { NativeStackScreenProps } from '@react-navigation/native-stack';\r\nimport type { RootStackParamList } from 'components/Navigator';\r\n\r\nimport React from 'react';\r\nimport {\r\n  StyleSheet,\r\n  Platform,\r\n  SafeAreaView,\r\n  KeyboardAvoidingView,\r\n  View,\r\n} from 'react-native';\r\nimport { useHeaderHeight } from '@react-navigation/elements';\r\nimport ForgotPasswordForm from './ForgotPasswordForm';\r\nimport ResetPasswordForm from './ResetPasswordForm';\r\n\r\ntype NavigationProps = NativeStackScreenProps<RootStackParamList, 'ForgotPassword'>;\r\n\r\nconst ForgotPassword = (props: NavigationProps) => {\r\n  const headerHeight = useHeaderHeight();\r\n  const [email, setEmail] = React.useState<string | null>(null);\r\n\r\n  return (\r\n    <SafeAreaView style={{ flex: 1 }}>\r\n      <KeyboardAvoidingView\r\n        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\r\n        keyboardVerticalOffset={headerHeight}\r\n        style={{ flex: 1 }}\r\n      >\r\n        <View style={styles.container}>\r\n          {email === null ? (\r\n            <ForgotPasswordForm onEmailSubmited={(email) => { setEmail(email); }} />\r\n          ) : <ResetPasswordForm email={email} />}\r\n        </View>\r\n      </KeyboardAvoidingView>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    paddingHorizontal: 20,\r\n  },\r\n});\r\n\r\nexport default ForgotPassword;\r\n","import type { ImageSourcePropType } from 'react-native';\r\nimport type { NativeStackNavigationProp } from '@react-navigation/native-stack';\r\nimport type { RootStackParamList } from 'components/Navigator';\r\n\r\nimport React from 'react';\r\nimport {\r\n  StyleSheet,\r\n  View,\r\n  Image,\r\n  Text,\r\n  useWindowDimensions,\r\n} from 'react-native';\r\nimport { IconButton } from 'react-native-paper';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport store from 'store/screens/onboarding';\r\n\r\nexport interface OnboardingItemProps {\r\n  image: ImageSourcePropType;\r\n  title: string;\r\n  description?: string;\r\n}\r\n\r\nconst OnboardingItem = (props: OnboardingItemProps) => {\r\n  const { image, title, description } = props;\r\n  const { width } = useWindowDimensions();\r\n  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\r\n  return (\r\n    <View style={[styles.container, { width }]}>\r\n      <Image source={image} style={styles.image} />\r\n      <View style={styles.texts}>\r\n        <Text style={styles.title}>{title}</Text>\r\n        {description !== undefined ? (\r\n          <Text style={styles.description}>{description}</Text>\r\n        ) : (\r\n          <IconButton\r\n            icon=\"arrow-right-circle\"\r\n            iconColor=\"whitesmoke\"\r\n            size={96}\r\n            onPress={() => {\r\n              store.saveOnboardingCompleted().catch(console.error);\r\n              navigation.replace('Home');\r\n            }}\r\n          />\r\n        )\r\n        }\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  image: {\r\n    flex: 0.7,\r\n    width: '100%',\r\n    resizeMode: 'contain',\r\n  },\r\n  texts: {\r\n    flex: 0.3,\r\n    alignItems: 'center',\r\n  },\r\n  title: {\r\n    marginBottom: 20,\r\n    fontSize: 32,\r\n    fontWeight: 'bold',\r\n    color: 'whitesmoke',\r\n    textAlign: 'center',\r\n  },\r\n  description: {\r\n    paddingHorizontal: 40,\r\n    fontSize: 16,\r\n    fontWeight: '500',\r\n    color: 'whitesmoke',\r\n    textAlign: 'justify',\r\n  },\r\n});\r\n\r\nexport default OnboardingItem;\r\n","import React from 'react';\r\nimport { StyleSheet, View } from 'react-native';\r\n\r\nexport interface PaginatorProps {\r\n  itemsCount: number;\r\n  currentItemIdx: number | null;\r\n}\r\n\r\nconst Paginator = (props: PaginatorProps) => {\r\n  const { itemsCount, currentItemIdx } = props;\r\n  return (\r\n    <View style={styles.container}>\r\n      {Array.from({ length: itemsCount }, (_, idx) => (\r\n        <View key={idx} style={[styles.dot, { opacity: (idx === currentItemIdx ? 1 : 0.5) }]} />\r\n      ))}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flexDirection: 'row',\r\n    height: 64,\r\n  },\r\n  dot: {\r\n    width: 10,\r\n    height: 10,\r\n    borderRadius: 5,\r\n    backgroundColor: 'whitesmoke',\r\n    marginHorizontal: 5,\r\n  },\r\n});\r\n\r\nexport default Paginator;\r\n","import type { ViewToken } from 'react-native';\r\nimport type { OnboardingItemProps } from './OnboardingItem';\r\n\r\nimport React from 'react';\r\nimport { FlatList, StyleSheet, View } from 'react-native';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Images } from 'core/constants';\r\nimport OnboardingItem from './OnboardingItem';\r\nimport Paginator from './Paginator';\r\n\r\nfunction getSlides(): Array<OnboardingItemProps> {\r\n  const { t } = useTranslation('screens', { keyPrefix: 'onboarding' });\r\n  return [\r\n    {\r\n      image: Images.onboarding.slide1,\r\n      title: t('slide1.title'),\r\n      description: t('slide1.description'),\r\n    },\r\n    {\r\n      image: Images.onboarding.slide2,\r\n      title: t('slide2.title'),\r\n      description: t('slide2.description'),\r\n    },\r\n    {\r\n      image: Images.onboarding.slide3,\r\n      title: t('slide3.title'),\r\n      description: t('slide3.description'),\r\n    },\r\n    {\r\n      image: Images.onboarding.slide4,\r\n      title: t('slide4.title'),\r\n      description: t('slide4.description'),\r\n    },\r\n    {\r\n      image: Images.onboarding.slide5,\r\n      title: t('slide5.title'),\r\n      description: t('slide5.description'),\r\n    },\r\n    {\r\n      image: Images.onboarding.slide6,\r\n      title: t('slide6.title'),\r\n    },\r\n  ];\r\n}\r\n\r\nconst OnboardingCarousel = () => {\r\n  const slides = getSlides();\r\n  const [currentItemIdx, setCurrentItemIdx] = React.useState<number | null>(0);\r\n  const handleViewableItemsChanged = React.useCallback((info: { viewableItems: ViewToken[], changed: ViewToken[] }) => {\r\n    setCurrentItemIdx(info.viewableItems.length > 0 ? info.viewableItems[0].index : null);\r\n  }, []);\r\n  return (\r\n    <View style={styles.container}>\r\n      <FlatList\r\n        data={slides}\r\n        renderItem={({ item }) => <OnboardingItem {...item} />}\r\n        horizontal\r\n        pagingEnabled\r\n        bounces={false}\r\n        showsHorizontalScrollIndicator={false}\r\n        onViewableItemsChanged={handleViewableItemsChanged}\r\n        viewabilityConfig={{ viewAreaCoveragePercentThreshold: 50 }}\r\n      />\r\n      <Paginator itemsCount={slides.length} currentItemIdx={currentItemIdx} />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n  },\r\n});\r\n\r\nexport default OnboardingCarousel;\r\n","import type { NativeStackScreenProps } from '@react-navigation/native-stack';\r\nimport type { RootStackParamList } from 'components/Navigator';\r\n\r\nimport React from 'react';\r\nimport OnboardingCarousel from './OnboardingCarousel';\r\n\r\ntype NavigationProps = NativeStackScreenProps<RootStackParamList, 'Onboarding'>;\r\n\r\nconst Onboarding = (props: NavigationProps) => {\r\n  return <OnboardingCarousel/>;\r\n};\r\n\r\nexport default Onboarding;\r\n","import React from 'react';\r\nimport { Platform, Keyboard } from 'react-native';\r\n\r\n// Note: keyboardWill[Show/Hide] events are not supported on Android\r\nconst ShowEventName = Platform.OS === 'android' ? 'keyboardDidShow' : 'keyboardWillShow';\r\nconst HideEventName = Platform.OS === 'android' ? 'keyboardDidHide' : 'keyboardWillHide';\r\n\r\nexport default function useKeyboardVisible() {\r\n  const [isKeyboardVisible, setKeyboardVisible] = React.useState(false);\r\n  React.useEffect(() => {\r\n    const showListener = Keyboard.addListener(ShowEventName, () => setKeyboardVisible(true));\r\n    const hideListener = Keyboard.addListener(HideEventName, () => setKeyboardVisible(false));\r\n    return () => {\r\n      showListener.remove();\r\n      hideListener.remove();\r\n    };\r\n  }, []);\r\n  return isKeyboardVisible;\r\n}\r\n","import React from 'react';\r\nimport { StyleSheet, View } from 'react-native';\r\nimport { ProgressBar, Text } from 'react-native-paper';\r\n\r\nexport interface CharsProgressProps {\r\n  maxCharsCount: number,\r\n  currentCharsCount: number,\r\n}\r\n\r\nconst CharsProgress = (props: CharsProgressProps) => {\r\n  const { maxCharsCount, currentCharsCount } = props;\r\n  const progress = currentCharsCount / maxCharsCount;\r\n  return (\r\n    <View style={styles.container}>\r\n      <ProgressBar progress={progress} style={styles.progressBar} />\r\n      <Text variant=\"labelLarge\" style={styles.label}>{maxCharsCount - currentCharsCount}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  progressBar: {\r\n    width: 64,\r\n    marginHorizontal: 8,\r\n  },\r\n  label: {\r\n    color: 'rgba(245,245,245, .75)',\r\n  },\r\n});\r\n\r\nexport default CharsProgress;\r\n","import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\r\nimport type { RootStackParamList } from 'components/Navigator';\r\n\r\nimport assert from 'assert';\r\nimport React from 'react';\r\nimport { StyleSheet, View, Keyboard } from 'react-native';\r\nimport { IconButton, TextInput } from 'react-native-paper';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {\r\n  SentenceTextMinLength,\r\n  SentenceTextMaxLength,\r\n} from 'core/constants';\r\nimport { handleWithSnack } from 'core/utils';\r\nimport { isMobile } from 'core/device';\r\nimport { useKeyboardVisible } from 'core/hooks';\r\nimport sentenceStore from 'store/common/sentence';\r\nimport store from 'store/screens/partial-story';\r\nimport CharsProgress from './CharsProgress';\r\n\r\nconst NewSentenceSchema = Yup.object().shape({\r\n  text: Yup.string()\r\n    .min(SentenceTextMinLength)\r\n    .max(SentenceTextMaxLength)\r\n    .required('Required')\r\n});\r\n\r\nconst NewSentenceForm = () => {\r\n  const { t } = useTranslation('screens', { keyPrefix: 'partialStory' });\r\n  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\r\n  const isKeyboardVisible = useKeyboardVisible();\r\n  return (\r\n    <Formik\r\n      initialValues={{ text: '' }}\r\n      validationSchema={NewSentenceSchema}\r\n      onSubmit={(values, actions) => {\r\n        const { text } = values;\r\n        const { lastSentence } = store;\r\n        assert(lastSentence);\r\n        Keyboard.dismiss();\r\n        const promise = sentenceStore.create({ text, parentSentenceId: lastSentence.id });\r\n        return handleWithSnack(promise, {\r\n          successMessage: null,\r\n          onSuccess: () => {\r\n            actions.resetForm();\r\n            navigation.navigate('ParticipationSuccess');\r\n          },\r\n          errorMessage: true,\r\n        });\r\n      }}\r\n    >\r\n      {({ handleSubmit, handleChange, handleBlur, isSubmitting, values, errors, touched }) => (\r\n        <View style={styles.container}>\r\n          <TextInput\r\n            style={styles.textInput}\r\n            mode=\"outlined\"\r\n            placeholder={t('write')}\r\n            multiline\r\n            maxLength={SentenceTextMaxLength}\r\n            value={values.text}\r\n            onChangeText={handleChange('text')}\r\n            onBlur={handleBlur('text')}\r\n            error={Boolean(errors.text) && touched.text}\r\n          />\r\n          {(isKeyboardVisible || !isMobile || values.text.length > 0) &&\r\n            <View style={styles.controlsContainer}>\r\n              <CharsProgress maxCharsCount={SentenceTextMaxLength} currentCharsCount={values.text.length} />\r\n              <IconButton\r\n                icon=\"send\"\r\n                disabled={isSubmitting}\r\n                onPress={() => handleSubmit()}\r\n              />\r\n            </View>\r\n          }\r\n        </View>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    position: 'absolute',\r\n    bottom: 0,\r\n    left: 0,\r\n    width: '100%',\r\n    paddingHorizontal: 4,\r\n  },\r\n  textInput: {\r\n    width: '100%',\r\n    maxHeight: 200,\r\n  },\r\n  controlsContainer: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    paddingHorizontal: 5,\r\n  },\r\n});\r\n\r\nexport default NewSentenceForm;\r\n","import type { NativeStackScreenProps } from '@react-navigation/native-stack';\r\nimport type { RootStackParamList } from 'components/Navigator';\r\n\r\nimport React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport {\r\n  StyleSheet,\r\n  Platform,\r\n  SafeAreaView,\r\n  KeyboardAvoidingView,\r\n  View,\r\n} from 'react-native';\r\nimport { Text } from 'react-native-paper';\r\nimport { useHeaderHeight } from '@react-navigation/elements';\r\nimport { useTranslation } from 'react-i18next';\r\nimport store from 'store/screens/partial-story';\r\nimport { SentencesList } from 'components/common';\r\nimport NewSentenceForm from './NewSentenceForm';\r\n\r\ntype NavigationProps = NativeStackScreenProps<RootStackParamList, 'PartialStory'>;\r\n\r\nconst PartialStory = observer((props: NavigationProps) => {\r\n  const { navigation } = props;\r\n  const { t } = useTranslation('screens', { keyPrefix: 'partialStory' });\r\n  const headerHeight = useHeaderHeight();\r\n  return (\r\n    <SafeAreaView style={{ flex: 1 }}>\r\n      <KeyboardAvoidingView\r\n        style={{ flex: 1 }}\r\n        behavior={Platform.OS === 'ios' ? 'padding' : undefined}\r\n        keyboardVerticalOffset={headerHeight}\r\n      >\r\n        <View style={{ flex: 1 }}>\r\n          <SentencesList\r\n            style={styles.sentenceList}\r\n            data={store.partialStory.result}\r\n            onReport={() => navigation.navigate('ParticipationSuccess')}\r\n            onMarkedCompleted={() => navigation.navigate('ParticipationSuccess')}\r\n            ListHeaderComponent={\r\n              <Text variant=\"labelMedium\" style={styles.listInfoHeader}>\r\n                {t('listInfoHeader')}\r\n              </Text>\r\n            }\r\n          />\r\n          <NewSentenceForm />\r\n        </View>\r\n      </KeyboardAvoidingView>\r\n    </SafeAreaView>\r\n  );\r\n});\r\n\r\nconst styles = StyleSheet.create({\r\n  sentenceList: {\r\n    paddingHorizontal: 20,\r\n  },\r\n  listInfoHeader: {\r\n    textAlign: 'center',\r\n    marginVertical: 20,\r\n  },\r\n});\r\n\r\nexport default PartialStory;\r\n","import type { NativeStackScreenProps } from '@react-navigation/native-stack';\r\nimport type { RootStackParamList } from 'components/Navigator';\r\n\r\nimport React from 'react';\r\nimport { StyleSheet, SafeAreaView, View } from 'react-native';\r\nimport { IconButton, Button, Text } from 'react-native-paper';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\ntype NavigationProps = NativeStackScreenProps<RootStackParamList, 'ParticipationSuccess'>;\r\n\r\nconst ParticipationSuccess = (props: NavigationProps) => {\r\n  const { navigation } = props;\r\n  const { t } = useTranslation('screens', { keyPrefix: 'participationSuccess' });\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <IconButton\r\n        icon=\"check-circle-outline\"\r\n        iconColor=\"whitesmoke\"\r\n        size={100}\r\n      />\r\n      <Text variant=\"headlineLarge\" style={styles.title}>{t('title')}</Text>\r\n      <View style={styles.buttonsContainer}>\r\n        <Button\r\n          style={styles.button}\r\n          mode=\"contained\"\r\n          onPress={() => navigation.navigate('PartialStory')}\r\n        >\r\n          <Text\r\n            variant=\"titleLarge\"\r\n            style={[styles.buttonText, { fontWeight: 'bold' }]}\r\n          >\r\n            {t('partialStoryLink')}\r\n          </Text>\r\n        </Button>\r\n        <Button\r\n          style={styles.button}\r\n          mode=\"contained\"\r\n          onPress={() => navigation.navigate('Home')}\r\n        >\r\n          <Text\r\n            variant=\"titleMedium\"\r\n            style={styles.buttonText}\r\n          >\r\n            {t('homeLink')}\r\n          </Text>\r\n        </Button>\r\n      </View>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    backgroundColor: 'mediumseagreen',\r\n  },\r\n  title: {\r\n    fontWeight: 'bold',\r\n    marginVertical: 4,\r\n    color: 'whitesmoke'\r\n  },\r\n  buttonsContainer: {\r\n    marginTop: 64,\r\n  },\r\n  button: {\r\n    marginVertical: 16,\r\n    backgroundColor: 'whitesmoke',\r\n  },\r\n  buttonText: {\r\n    color: 'mediumseagreen',\r\n  },\r\n});\r\n\r\nexport default ParticipationSuccess;\r\n","import { gql } from '@apollo/client';\r\nimport apolloClient from 'core/apolloClient';\r\n\r\nconst query = gql`\r\nquery GetStory ($storyId: Int!) {\r\n  public {\r\n    story(storyId: $storyId) {\r\n      id\r\n      sentences {\r\n        id\r\n        text\r\n        parentSentenceId\r\n        owner {\r\n          id\r\n          username\r\n        }\r\n        createdAt\r\n      }\r\n      createdAt\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport type Owner = {\r\n  id: number,\r\n  username: string,\r\n};\r\n\r\nexport type Sentence = {\r\n  id: number,\r\n  text: string,\r\n  parentSentenceId: number | null;\r\n  owner: Owner | null,\r\n  createdAt: number/*timestamp*/,\r\n};\r\n\r\nexport type Story = {\r\n  id: number,\r\n  sentences: Sentence[],\r\n  createdAt: number/*timestamp*/,\r\n}\r\n\r\nexport type GetStoryResponse = {\r\n  public: {\r\n    story: Story,\r\n  },\r\n};\r\n\r\nexport interface GetStoryVariables {\r\n  storyId: number;\r\n}\r\n\r\nexport default async function GetStory(variables: GetStoryVariables) {\r\n  const res = await apolloClient.query<GetStoryResponse>({ query, variables });\r\n  return res.data.public.story;\r\n}\r\n","import { Fetchable } from 'core/utils/promise';\r\nimport { GetStory } from './api';\r\n\r\nclass StoryViewerStore {\r\n  public story = new Fetchable(GetStory, { catchUnhandled: console.error });\r\n\r\n  public async refresh(storyId: number) {\r\n    await this.story.ensureSuccessReload({ storyId });\r\n  }\r\n}\r\n\r\nexport default new StoryViewerStore();\r\n","import type { NativeStackScreenProps } from '@react-navigation/native-stack';\r\nimport type { RootStackParamList } from 'components/Navigator';\r\n\r\nimport React from 'react';\r\nimport { StyleSheet, SafeAreaView } from 'react-native';\r\nimport { Text } from 'react-native-paper';\r\nimport { useFocusEffect } from '@react-navigation/native';\r\nimport { observer } from 'mobx-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { format } from 'date-fns';\r\nimport { handleWithSnack } from 'core/utils/promise';\r\nimport { SentencesList } from 'components/common';\r\nimport store from 'store/screens/story-viewer';\r\n\r\ntype NavigationProps = NativeStackScreenProps<RootStackParamList, 'StoryViewer'>;\r\n\r\nconst StoryViewer = observer((props: NavigationProps) => {\r\n  const { storyId } = props.route.params;\r\n  useFocusEffect(\r\n    React.useCallback(() => {\r\n      const promise = store.refresh(storyId);\r\n      handleWithSnack(promise, { successMessage: null, errorMessage: true });\r\n    }, [storyId])\r\n  );\r\n  const { t } = useTranslation('screens', { keyPrefix: 'storyViewer' });\r\n  const story = store.story.result;\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <SentencesList\r\n        data={story?.sentences}\r\n        disableControls\r\n        style={styles.sentencesList}\r\n        ListHeaderComponent={\r\n          (story?.createdAt !== undefined ? (\r\n            <Text variant=\"labelMedium\" style={styles.dateHeader}>\r\n              {`${t('completedTitle')} ${format(story.createdAt, t('dateFormat'))}`}\r\n            </Text>\r\n          ) : null)\r\n        }\r\n      />\r\n    </SafeAreaView>\r\n  );\r\n});\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  sentencesList: {\r\n    paddingHorizontal: 20,\r\n  },\r\n  dateHeader: {\r\n    textAlign: 'center',\r\n    marginVertical: 20,\r\n  },\r\n});\r\n\r\nexport default StoryViewer;\r\n","import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\r\nimport type { RootStackParamList } from 'components/Navigator';\r\nimport type { Story } from 'store/screens/library/api';\r\n\r\nimport React from 'react';\r\nimport { StyleSheet } from 'react-native';\r\nimport { Card } from 'react-native-paper';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { format } from 'date-fns';\r\n\r\nexport interface StoryPreviewProps {\r\n  story: Story;\r\n}\r\n\r\nconst StoryPreview = (props: StoryPreviewProps) => {\r\n  const { story } = props;\r\n  const { id, title, createdAt } = story;\r\n  const { t } = useTranslation('screens', { keyPrefix: 'library' });\r\n  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\r\n  return (\r\n    <Card\r\n      style={styles.card}\r\n      onPress={() => navigation.navigate('StoryViewer', { storyId: id })}\r\n    >\r\n      <Card.Title\r\n        title={title}\r\n        titleVariant=\"bodyLarge\"\r\n        subtitle={format(createdAt, t('misc.dateFormat'))}\r\n        subtitleVariant=\"labelSmall\"\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  card: {\r\n    marginBottom: 20,\r\n  },\r\n});\r\n\r\nexport default StoryPreview;\r\n","import React from 'react';\r\nimport { StyleSheet, View, Image } from 'react-native';\r\nimport { Text } from 'react-native-paper';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Images } from 'core/constants';\r\n\r\nconst EmptyLibrary = () => {\r\n  const { t } = useTranslation('screens', { keyPrefix: 'library' });\r\n  return (\r\n    <View style={styles.container}>\r\n      <Image source={Images.misc.empty} style={styles.image} />\r\n      <Text variant=\"titleLarge\">{t('emptyLibrary')}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    paddingTop: 50,\r\n  },\r\n  image: {\r\n    width: 200,\r\n    height: 200,\r\n    resizeMode: 'contain',\r\n  }\r\n});\r\n\r\nexport default EmptyLibrary;\r\n","import type { NativeStackScreenProps } from '@react-navigation/native-stack';\r\nimport type { RootStackParamList } from 'components/Navigator';\r\n\r\nimport React from 'react';\r\nimport { StyleSheet, View, FlatList, RefreshControl } from 'react-native';\r\nimport { Text } from 'react-native-paper';\r\nimport { observer } from 'mobx-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { handleWithSnack } from 'core/utils/promise';\r\nimport store from 'store/screens/library';\r\nimport { ParticipationFab } from 'components/common';\r\nimport StoryPreview from './StoryPreview';\r\nimport EmptyLibrary from './EmptyLibrary';\r\n\r\ntype NavigationProps = NativeStackScreenProps<RootStackParamList, 'Library'>;\r\n\r\nconst Library = observer((props: NavigationProps) => {\r\n  const { t } = useTranslation('screens', { keyPrefix: 'library' });\r\n  return (\r\n    <View style={styles.container}>\r\n      <FlatList\r\n        data={store.stories.result}\r\n        renderItem={({ item }) => <StoryPreview story={item} />}\r\n        keyExtractor={item => item.id.toString()}\r\n        refreshControl={\r\n          <RefreshControl\r\n            refreshing={store.stories.loading}\r\n            onRefresh={() => {\r\n              const promise = store.refresh();\r\n              handleWithSnack(promise, { successMessage: null, errorMessage: true });\r\n            }}\r\n          />\r\n        }\r\n        ListHeaderComponent={\r\n          <Text\r\n            variant=\"labelLarge\"\r\n            style={styles.infoText}\r\n          >\r\n            {t('pageInfo', { sentencesCount: store.mySentencesCount.lastResult })}\r\n          </Text>\r\n        }\r\n        ListEmptyComponent={<EmptyLibrary />}\r\n      />\r\n      <ParticipationFab />\r\n    </View>\r\n  );\r\n});\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    paddingHorizontal: 10,\r\n  },\r\n  infoText: {\r\n    marginVertical: 24,\r\n  },\r\n});\r\n\r\nexport default Library;\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport {\r\n  homeHandler,\r\n  partialStoryHandler,\r\n  libraryHandler,\r\n} from 'store/handlers';\r\nimport AppStore from 'store/common/app';\r\nimport OnboardingStore from 'store/screens/onboarding';\r\nimport {\r\n  Loading,\r\n  Login,\r\n  Home,\r\n  Register,\r\n  ForgotPassword,\r\n  Onboarding,\r\n  PartialStory,\r\n  ParticipationSuccess,\r\n  StoryViewer,\r\n  Library,\r\n} from 'components/screens';\r\n\r\nexport type RootStackParamList = {\r\n  Home: undefined;\r\n  Login: undefined;\r\n  Register: undefined;\r\n  ForgotPassword: undefined;\r\n  Onboarding: undefined;\r\n  PartialStory: undefined;\r\n  ParticipationSuccess: undefined;\r\n  StoryViewer: { storyId: number },\r\n  Library: undefined,\r\n};\r\n\r\nconst Stack = createNativeStackNavigator<RootStackParamList>();\r\n\r\nconst Navigator = observer(() => {\r\n  const { t } = useTranslation('common', { keyPrefix: 'app' });\r\n  if (AppStore.loading)\r\n    return <Loading />;\r\n  return (\r\n    <NavigationContainer>\r\n      <Stack.Navigator\r\n        initialRouteName={OnboardingStore.onboardingCompleted ? 'Home' : 'Onboarding'}\r\n        screenOptions={{\r\n          headerStyle: {\r\n            backgroundColor: '#2b2b2b',\r\n          },\r\n          headerBackTitle: t('backTitle'),\r\n          headerTitleStyle: {\r\n            fontWeight: 'bold',\r\n            fontSize: 20,\r\n            color: '#fafafa',\r\n          },\r\n          contentStyle: {\r\n            backgroundColor: '#2b2b2b',\r\n          },\r\n        }}\r\n      >\r\n        <Stack.Screen name=\"Home\" component={Home} options={{ headerShown: false }} listeners={{ focus: homeHandler }} />\r\n        <Stack.Screen name=\"Login\" component={Login} options={{ title: t('screens.login') }} />\r\n        <Stack.Screen name=\"Register\" component={Register} options={{ title: t('screens.register') }} />\r\n        <Stack.Screen name=\"ForgotPassword\" component={ForgotPassword} options={{ title: t('screens.forgotPassword') }} />\r\n        <Stack.Screen name=\"Onboarding\" component={Onboarding} options={{ headerShown: false }} />\r\n        <Stack.Screen name=\"PartialStory\" component={PartialStory} options={{ title: t('screens.partialStory') }} listeners={{ focus: partialStoryHandler }} />\r\n        <Stack.Screen name=\"ParticipationSuccess\" component={ParticipationSuccess} options={{ headerShown: false }} />\r\n        <Stack.Screen name=\"StoryViewer\" component={StoryViewer} options={{ title: t('screens.storyViewer') }} />\r\n        <Stack.Screen name=\"Library\" component={Library} options={{ title: t('screens.library') }} listeners={{ focus: libraryHandler }} />\r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n});\r\n\r\nexport default Navigator;\r\n","import React from 'react';\nimport { registerRootComponent } from 'expo';\nimport { StatusBar } from 'expo-status-bar';\nimport { ApolloProvider } from '@apollo/client';\nimport { Provider as PaperProvider, MD3DarkTheme } from 'react-native-paper';\nimport 'lang';\nimport client from 'core/apolloClient';\nimport { Snackbar } from 'components/common/app';\nimport AppContainer from './AppContainer';\nimport Navigator from './Navigator';\n\nconst App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <PaperProvider theme={MD3DarkTheme}>\n        <AppContainer>\n          <Navigator />\n          <Snackbar />\n          <StatusBar style='auto' />\n        </AppContainer>\n      </PaperProvider>\n    </ApolloProvider>\n  );\n};\n\nregisterRootComponent(App);\n"],"sourceRoot":""}